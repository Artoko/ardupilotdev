
XXcontroller_KR_v1_1a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000011aa  0000123e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800102  00800102  00001240  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000037a  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f5  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022b  00000000  00000000  00001ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e32  00000000  00000000  000020fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fb  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022d  00000000  00000000  00003587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_2>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ea       	ldi	r30, 0xAA	; 170
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 36       	cpi	r26, 0x62	; 98
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 81 08 	call	0x1102	; 0x1102 <main>
      9e:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
void delay_ms(uint16_t time);


// RX_ROLL
ISR(PCINT2_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
	if ( RX_ROLL )			// rising
      b8:	49 9b       	sbis	0x09, 1	; 9
      ba:	09 c0       	rjmp	.+18     	; 0xce <__vector_5+0x28>
	{
		RxChannel1Start = TCNT1;
      bc:	80 91 84 00 	lds	r24, 0x0084
      c0:	90 91 85 00 	lds	r25, 0x0085
      c4:	90 93 46 01 	sts	0x0146, r25
      c8:	80 93 45 01 	sts	0x0145, r24
      cc:	13 c0       	rjmp	.+38     	; 0xf4 <__vector_5+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 51 01 	sts	0x0151, r24
		RxChannel1 = TCNT1 - RxChannel1Start;
      d4:	80 91 84 00 	lds	r24, 0x0084
      d8:	90 91 85 00 	lds	r25, 0x0085
      dc:	20 91 45 01 	lds	r18, 0x0145
      e0:	30 91 46 01 	lds	r19, 0x0146
      e4:	82 1b       	sub	r24, r18
      e6:	93 0b       	sbc	r25, r19
      e8:	90 93 53 01 	sts	0x0153, r25
      ec:	80 93 52 01 	sts	0x0152, r24
		RxChannelsUpdatingFlag = 0;
      f0:	10 92 51 01 	sts	0x0151, r1
	}
}
      f4:	9f 91       	pop	r25
      f6:	8f 91       	pop	r24
      f8:	3f 91       	pop	r19
      fa:	2f 91       	pop	r18
      fc:	0f 90       	pop	r0
      fe:	0f be       	out	0x3f, r0	; 63
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <__vector_1>:

// RX_PITCH
ISR(INT0_vect)
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
	if (RX_PITCH)		
     118:	4a 9b       	sbis	0x09, 2	; 9
     11a:	09 c0       	rjmp	.+18     	; 0x12e <__vector_1+0x28>
	{
		RxChannel2Start = TCNT1;
     11c:	80 91 84 00 	lds	r24, 0x0084
     120:	90 91 85 00 	lds	r25, 0x0085
     124:	90 93 25 01 	sts	0x0125, r25
     128:	80 93 24 01 	sts	0x0124, r24
     12c:	13 c0       	rjmp	.+38     	; 0x154 <__vector_1+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	80 93 51 01 	sts	0x0151, r24
		RxChannel2 = TCNT1 - RxChannel2Start;
     134:	80 91 84 00 	lds	r24, 0x0084
     138:	90 91 85 00 	lds	r25, 0x0085
     13c:	20 91 24 01 	lds	r18, 0x0124
     140:	30 91 25 01 	lds	r19, 0x0125
     144:	82 1b       	sub	r24, r18
     146:	93 0b       	sbc	r25, r19
     148:	90 93 3b 01 	sts	0x013B, r25
     14c:	80 93 3a 01 	sts	0x013A, r24
		RxChannelsUpdatingFlag = 0;
     150:	10 92 51 01 	sts	0x0151, r1
	}
}
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	3f 91       	pop	r19
     15a:	2f 91       	pop	r18
     15c:	0f 90       	pop	r0
     15e:	0f be       	out	0x3f, r0	; 63
     160:	0f 90       	pop	r0
     162:	1f 90       	pop	r1
     164:	18 95       	reti

00000166 <__vector_2>:

// RX_COLL
ISR(INT1_vect)
{
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
	if (RX_COLL)		
     178:	4b 9b       	sbis	0x09, 3	; 9
     17a:	09 c0       	rjmp	.+18     	; 0x18e <__vector_2+0x28>
	{
		RxChannel3Start = TCNT1;
     17c:	80 91 84 00 	lds	r24, 0x0084
     180:	90 91 85 00 	lds	r25, 0x0085
     184:	90 93 31 01 	sts	0x0131, r25
     188:	80 93 30 01 	sts	0x0130, r24
     18c:	13 c0       	rjmp	.+38     	; 0x1b4 <__vector_2+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 51 01 	sts	0x0151, r24
		RxChannel3 = TCNT1 - RxChannel3Start;
     194:	80 91 84 00 	lds	r24, 0x0084
     198:	90 91 85 00 	lds	r25, 0x0085
     19c:	20 91 30 01 	lds	r18, 0x0130
     1a0:	30 91 31 01 	lds	r19, 0x0131
     1a4:	82 1b       	sub	r24, r18
     1a6:	93 0b       	sbc	r25, r19
     1a8:	90 93 50 01 	sts	0x0150, r25
     1ac:	80 93 4f 01 	sts	0x014F, r24
		RxChannelsUpdatingFlag = 0;
     1b0:	10 92 51 01 	sts	0x0151, r1
	}
}
     1b4:	9f 91       	pop	r25
     1b6:	8f 91       	pop	r24
     1b8:	3f 91       	pop	r19
     1ba:	2f 91       	pop	r18
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	0f 90       	pop	r0
     1c2:	1f 90       	pop	r1
     1c4:	18 95       	reti

000001c6 <__vector_3>:

// RX_YAW
ISR(PCINT0_vect)
{
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	0f 92       	push	r0
     1ce:	11 24       	eor	r1, r1
     1d0:	2f 93       	push	r18
     1d2:	3f 93       	push	r19
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
	if ( RX_YAW )			// rising
     1d8:	1f 9b       	sbis	0x03, 7	; 3
     1da:	09 c0       	rjmp	.+18     	; 0x1ee <__vector_3+0x28>
	{
		RxChannel4Start = TCNT1;
     1dc:	80 91 84 00 	lds	r24, 0x0084
     1e0:	90 91 85 00 	lds	r25, 0x0085
     1e4:	90 93 4e 01 	sts	0x014E, r25
     1e8:	80 93 4d 01 	sts	0x014D, r24
     1ec:	13 c0       	rjmp	.+38     	; 0x214 <__vector_3+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	80 93 51 01 	sts	0x0151, r24
		RxChannel4 = TCNT1 - RxChannel4Start;
     1f4:	80 91 84 00 	lds	r24, 0x0084
     1f8:	90 91 85 00 	lds	r25, 0x0085
     1fc:	20 91 4d 01 	lds	r18, 0x014D
     200:	30 91 4e 01 	lds	r19, 0x014E
     204:	82 1b       	sub	r24, r18
     206:	93 0b       	sbc	r25, r19
     208:	90 93 27 01 	sts	0x0127, r25
     20c:	80 93 26 01 	sts	0x0126, r24
		RxChannelsUpdatingFlag = 0;
     210:	10 92 51 01 	sts	0x0151, r1
	}
}
     214:	9f 91       	pop	r25
     216:	8f 91       	pop	r24
     218:	3f 91       	pop	r19
     21a:	2f 91       	pop	r18
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <Init_ADC>:

//----------------------------------------------

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     226:	8f e3       	ldi	r24, 0x3F	; 63
     228:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     22c:	10 92 7b 00 	sts	0x007B, r1
}
     230:	08 95       	ret

00000232 <ReadGainPots>:
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     238:	86 ec       	ldi	r24, 0xC6	; 198
     23a:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     23e:	80 91 7a 00 	lds	r24, 0x007A
     242:	86 fd       	sbrc	r24, 6
     244:	fc cf       	rjmp	.-8      	; 0x23e <ReadGainPots+0xc>
void ReadGainPots(void)
{
	uint16_t t;				// Minsoo

	read_adc( 3 );			// read roll gain ADC3
	GainInADC[ROLL] = ADCL;
     246:	40 91 78 00 	lds	r20, 0x0078
	GainInADC[ROLL] ^= 0xff;
	t = ADCH;
     24a:	80 91 79 00 	lds	r24, 0x0079
     24e:	90 e0       	ldi	r25, 0x00	; 0
	t ^= 0x03;
	GainInADC[ROLL] += ((uint16_t) t <<8);
     250:	23 e0       	ldi	r18, 0x03	; 3
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	82 27       	eor	r24, r18
     256:	93 27       	eor	r25, r19
     258:	98 2f       	mov	r25, r24
     25a:	88 27       	eor	r24, r24
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	2f ef       	ldi	r18, 0xFF	; 255
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	42 27       	eor	r20, r18
     264:	53 27       	eor	r21, r19
     266:	84 0f       	add	r24, r20
     268:	95 1f       	adc	r25, r21
     26a:	90 93 48 01 	sts	0x0148, r25
     26e:	80 93 47 01 	sts	0x0147, r24
	GainIn[ROLL] = GainInADC[ROLL] / 10;			// 0~1023 ---> 0 ~ 100, Minsoo
     272:	6a e0       	ldi	r22, 0x0A	; 10
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 86 08 	call	0x110c	; 0x110c <__udivmodhi4>
     27a:	70 93 35 01 	sts	0x0135, r23
     27e:	60 93 34 01 	sts	0x0134, r22
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     288:	86 ec       	ldi	r24, 0xC6	; 198
     28a:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     28e:	80 91 7a 00 	lds	r24, 0x007A
     292:	86 fd       	sbrc	r24, 6
     294:	fc cf       	rjmp	.-8      	; 0x28e <ReadGainPots+0x5c>
	GainInADC[ROLL] += ((uint16_t) t <<8);
	GainIn[ROLL] = GainInADC[ROLL] / 10;			// 0~1023 ---> 0 ~ 100, Minsoo


	read_adc( 4 );			// read pitch gain ADC4
	GainInADC[PITCH] = ADCL;
     296:	40 91 78 00 	lds	r20, 0x0078
	GainInADC[PITCH] ^= 0xff;
	t = ADCH;
     29a:	80 91 79 00 	lds	r24, 0x0079
     29e:	90 e0       	ldi	r25, 0x00	; 0
	t ^= 0x03;
	GainInADC[PITCH] += ((uint16_t) t <<8);
     2a0:	23 e0       	ldi	r18, 0x03	; 3
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	82 27       	eor	r24, r18
     2a6:	93 27       	eor	r25, r19
     2a8:	98 2f       	mov	r25, r24
     2aa:	88 27       	eor	r24, r24
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	2f ef       	ldi	r18, 0xFF	; 255
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	42 27       	eor	r20, r18
     2b4:	53 27       	eor	r21, r19
     2b6:	84 0f       	add	r24, r20
     2b8:	95 1f       	adc	r25, r21
     2ba:	90 93 4a 01 	sts	0x014A, r25
     2be:	80 93 49 01 	sts	0x0149, r24
	GainIn[PITCH] = GainInADC[PITCH] / 10;			// 0~1023 ---> 0 ~ 100, Minsoo
     2c2:	6a e0       	ldi	r22, 0x0A	; 10
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	0e 94 86 08 	call	0x110c	; 0x110c <__udivmodhi4>
     2ca:	70 93 37 01 	sts	0x0137, r23
     2ce:	60 93 36 01 	sts	0x0136, r22
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     2d8:	86 ec       	ldi	r24, 0xC6	; 198
     2da:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     2de:	80 91 7a 00 	lds	r24, 0x007A
     2e2:	86 fd       	sbrc	r24, 6
     2e4:	fc cf       	rjmp	.-8      	; 0x2de <ReadGainPots+0xac>
	t ^= 0x03;
	GainInADC[PITCH] += ((uint16_t) t <<8);
	GainIn[PITCH] = GainInADC[PITCH] / 10;			// 0~1023 ---> 0 ~ 100, Minsoo

	read_adc( 5 );			// read yaw gain ADC5
	GainInADC[YAW] = ADCL;
     2e6:	40 91 78 00 	lds	r20, 0x0078
	GainInADC[YAW] ^= 0xff;
	t = ADCH;
     2ea:	80 91 79 00 	lds	r24, 0x0079
     2ee:	90 e0       	ldi	r25, 0x00	; 0
	t ^= 0x03;
	GainInADC[YAW] += ((uint16_t) t <<8);
     2f0:	23 e0       	ldi	r18, 0x03	; 3
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	82 27       	eor	r24, r18
     2f6:	93 27       	eor	r25, r19
     2f8:	98 2f       	mov	r25, r24
     2fa:	88 27       	eor	r24, r24
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	2f ef       	ldi	r18, 0xFF	; 255
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	42 27       	eor	r20, r18
     304:	53 27       	eor	r21, r19
     306:	84 0f       	add	r24, r20
     308:	95 1f       	adc	r25, r21
     30a:	90 93 4c 01 	sts	0x014C, r25
     30e:	80 93 4b 01 	sts	0x014B, r24
	GainIn[YAW] = GainInADC[YAW] / 10;				// 0~1023 ---> 0 ~ 100, Minsoo
     312:	6a e0       	ldi	r22, 0x0A	; 10
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	0e 94 86 08 	call	0x110c	; 0x110c <__udivmodhi4>
     31a:	70 93 39 01 	sts	0x0139, r23
     31e:	60 93 38 01 	sts	0x0138, r22
}
     322:	08 95       	ret

00000324 <read_adc>:
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     324:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     328:	86 ec       	ldi	r24, 0xC6	; 198
     32a:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     32e:	80 91 7a 00 	lds	r24, 0x007A
     332:	86 fd       	sbrc	r24, 6
     334:	fc cf       	rjmp	.-8      	; 0x32e <read_adc+0xa>
}
     336:	08 95       	ret

00000338 <ReadGyros>:

void ReadGyros(bool calibrate)
{
     338:	48 2f       	mov	r20, r24
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     340:	86 ec       	ldi	r24, 0xC6	; 198
     342:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     346:	80 91 7a 00 	lds	r24, 0x007A
     34a:	86 fd       	sbrc	r24, 6
     34c:	fc cf       	rjmp	.-8      	; 0x346 <ReadGyros+0xe>
}

void ReadGyros(bool calibrate)
{
	read_adc( 2 );			// read roll gyro ADC2
	gyroADC[ROLL] = ADCL;
     34e:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
     352:	20 91 79 00 	lds	r18, 0x0079
     356:	92 2f       	mov	r25, r18
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	bc 01       	movw	r22, r24
     35c:	63 0f       	add	r22, r19
     35e:	71 1d       	adc	r23, r1
     360:	9b 01       	movw	r18, r22
     362:	70 93 1c 01 	sts	0x011C, r23
     366:	60 93 1b 01 	sts	0x011B, r22
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output
     36a:	44 23       	and	r20, r20
     36c:	51 f4       	brne	.+20     	; 0x382 <ReadGyros+0x4a>
     36e:	80 91 02 01 	lds	r24, 0x0102
     372:	90 91 03 01 	lds	r25, 0x0103
     376:	28 1b       	sub	r18, r24
     378:	39 0b       	sbc	r19, r25
     37a:	30 93 1c 01 	sts	0x011C, r19
     37e:	20 93 1b 01 	sts	0x011B, r18
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     388:	86 ec       	ldi	r24, 0xC6	; 198
     38a:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     38e:	80 91 7a 00 	lds	r24, 0x007A
     392:	86 fd       	sbrc	r24, 6
     394:	fc cf       	rjmp	.-8      	; 0x38e <ReadGyros+0x56>
	gyroADC[ROLL] = ADCL;
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output

	read_adc( 1 );			// read pitch gyro ADC1
	gyroADC[PITCH] = ADCL;
     396:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[PITCH] += ((uint16_t) ADCH <<8);
     39a:	20 91 79 00 	lds	r18, 0x0079
     39e:	92 2f       	mov	r25, r18
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	bc 01       	movw	r22, r24
     3a4:	63 0f       	add	r22, r19
     3a6:	71 1d       	adc	r23, r1
     3a8:	9b 01       	movw	r18, r22
     3aa:	70 93 1e 01 	sts	0x011E, r23
     3ae:	60 93 1d 01 	sts	0x011D, r22
	if (!calibrate) gyroADC[PITCH] -= gyroZero[PITCH];				//remove offset from gyro output
     3b2:	44 23       	and	r20, r20
     3b4:	51 f4       	brne	.+20     	; 0x3ca <ReadGyros+0x92>
     3b6:	80 91 04 01 	lds	r24, 0x0104
     3ba:	90 91 05 01 	lds	r25, 0x0105
     3be:	28 1b       	sub	r18, r24
     3c0:	39 0b       	sbc	r19, r25
     3c2:	30 93 1e 01 	sts	0x011E, r19
     3c6:	20 93 1d 01 	sts	0x011D, r18
}
*/

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     3ca:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     3ce:	86 ec       	ldi	r24, 0xC6	; 198
     3d0:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     3d4:	80 91 7a 00 	lds	r24, 0x007A
     3d8:	86 fd       	sbrc	r24, 6
     3da:	fc cf       	rjmp	.-8      	; 0x3d4 <ReadGyros+0x9c>

#ifdef EXTERNAL_YAW_GYRO
	gyroADC[YAW] = 0;
#else
	read_adc( 0 );			// read yaw gyro ADC0
	gyroADC[YAW] = ADCL;
     3dc:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[YAW] += ((uint16_t) ADCH <<8);
     3e0:	20 91 79 00 	lds	r18, 0x0079
     3e4:	92 2f       	mov	r25, r18
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	bc 01       	movw	r22, r24
     3ea:	63 0f       	add	r22, r19
     3ec:	71 1d       	adc	r23, r1
     3ee:	9b 01       	movw	r18, r22
     3f0:	70 93 20 01 	sts	0x0120, r23
     3f4:	60 93 1f 01 	sts	0x011F, r22
	if (!calibrate) gyroADC[YAW]	-= gyroZero[YAW];				//remove offset from gyro output
     3f8:	44 23       	and	r20, r20
     3fa:	51 f4       	brne	.+20     	; 0x410 <ReadGyros+0xd8>
     3fc:	80 91 06 01 	lds	r24, 0x0106
     400:	90 91 07 01 	lds	r25, 0x0107
     404:	28 1b       	sub	r18, r24
     406:	39 0b       	sbc	r19, r25
     408:	30 93 20 01 	sts	0x0120, r19
     40c:	20 93 1f 01 	sts	0x011F, r18
     410:	08 95       	ret

00000412 <CalibrateGyros>:
#endif
}

void CalibrateGyros(void)
{
     412:	1f 93       	push	r17
	uint8_t i;

	ReadGainPots();	// about time we did this !
     414:	0e 94 19 01 	call	0x232	; 0x232 <ReadGainPots>

	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
     418:	10 92 03 01 	sts	0x0103, r1
     41c:	10 92 02 01 	sts	0x0102, r1
	gyroZero[PITCH] = 0;	
     420:	10 92 05 01 	sts	0x0105, r1
     424:	10 92 04 01 	sts	0x0104, r1
	gyroZero[YAW] 	= 0;
     428:	10 92 07 01 	sts	0x0107, r1
     42c:	10 92 06 01 	sts	0x0106, r1
     430:	10 e0       	ldi	r17, 0x00	; 0

	for (i=0;i<32;i++)
	{
		ReadGyros(true);
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 9c 01 	call	0x338	; 0x338 <ReadGyros>
	
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
     438:	60 91 02 01 	lds	r22, 0x0102
     43c:	70 91 03 01 	lds	r23, 0x0103
     440:	80 91 1b 01 	lds	r24, 0x011B
     444:	90 91 1c 01 	lds	r25, 0x011C
     448:	68 0f       	add	r22, r24
     44a:	79 1f       	adc	r23, r25
     44c:	70 93 03 01 	sts	0x0103, r23
     450:	60 93 02 01 	sts	0x0102, r22
		gyroZero[PITCH] += gyroADC[PITCH];	
     454:	40 91 04 01 	lds	r20, 0x0104
     458:	50 91 05 01 	lds	r21, 0x0105
     45c:	80 91 1d 01 	lds	r24, 0x011D
     460:	90 91 1e 01 	lds	r25, 0x011E
     464:	48 0f       	add	r20, r24
     466:	59 1f       	adc	r21, r25
     468:	50 93 05 01 	sts	0x0105, r21
     46c:	40 93 04 01 	sts	0x0104, r20
		gyroZero[YAW] 	+= gyroADC[YAW];
     470:	20 91 06 01 	lds	r18, 0x0106
     474:	30 91 07 01 	lds	r19, 0x0107
     478:	80 91 1f 01 	lds	r24, 0x011F
     47c:	90 91 20 01 	lds	r25, 0x0120
     480:	28 0f       	add	r18, r24
     482:	39 1f       	adc	r19, r25
     484:	30 93 07 01 	sts	0x0107, r19
     488:	20 93 06 01 	sts	0x0106, r18
	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
	gyroZero[PITCH] = 0;	
	gyroZero[YAW] 	= 0;

	for (i=0;i<32;i++)
     48c:	1f 5f       	subi	r17, 0xFF	; 255
     48e:	10 32       	cpi	r17, 0x20	; 32
     490:	81 f6       	brne	.-96     	; 0x432 <CalibrateGyros+0x20>
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
		gyroZero[PITCH] += gyroADC[PITCH];	
		gyroZero[YAW] 	+= gyroADC[YAW];
	}

	gyroZero[ROLL] 	= (gyroZero[ROLL] >> 5);						
     492:	e5 e0       	ldi	r30, 0x05	; 5
     494:	75 95       	asr	r23
     496:	67 95       	ror	r22
     498:	ea 95       	dec	r30
     49a:	e1 f7       	brne	.-8      	; 0x494 <CalibrateGyros+0x82>
     49c:	70 93 03 01 	sts	0x0103, r23
     4a0:	60 93 02 01 	sts	0x0102, r22
	gyroZero[PITCH] = (gyroZero[PITCH] >> 5);
     4a4:	75 e0       	ldi	r23, 0x05	; 5
     4a6:	55 95       	asr	r21
     4a8:	47 95       	ror	r20
     4aa:	7a 95       	dec	r23
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <CalibrateGyros+0x94>
     4ae:	50 93 05 01 	sts	0x0105, r21
     4b2:	40 93 04 01 	sts	0x0104, r20
	gyroZero[YAW] 	= (gyroZero[YAW] >> 5);
     4b6:	65 e0       	ldi	r22, 0x05	; 5
     4b8:	35 95       	asr	r19
     4ba:	27 95       	ror	r18
     4bc:	6a 95       	dec	r22
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <CalibrateGyros+0xa6>
     4c0:	30 93 07 01 	sts	0x0107, r19
     4c4:	20 93 06 01 	sts	0x0106, r18

	GyroCalibrated = true;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 23 01 	sts	0x0123, r24
}
     4ce:	1f 91       	pop	r17
     4d0:	08 95       	ret

000004d2 <RxGetChannels>:
//--- Get and scale RX channel inputs ---
void RxGetChannels(void)
{
	static int16_t RxChannel;

	while ( RxChannelsUpdatingFlag );
     4d2:	80 91 51 01 	lds	r24, 0x0151
     4d6:	88 23       	and	r24, r24
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <RxGetChannels>

	RxChannel = RxChannel1;
     4da:	80 91 52 01 	lds	r24, 0x0152
     4de:	90 91 53 01 	lds	r25, 0x0153
	RxChannel -= Config.RxChannel1ZeroOffset;		// normalise
	RxInRoll = (RxChannel >> 2);                    //     "
     4e2:	20 91 5a 01 	lds	r18, 0x015A
     4e6:	30 91 5b 01 	lds	r19, 0x015B
     4ea:	82 1b       	sub	r24, r18
     4ec:	93 0b       	sbc	r25, r19
     4ee:	95 95       	asr	r25
     4f0:	87 95       	ror	r24
     4f2:	95 95       	asr	r25
     4f4:	87 95       	ror	r24
     4f6:	90 93 29 01 	sts	0x0129, r25
     4fa:	80 93 28 01 	sts	0x0128, r24

	while ( RxChannelsUpdatingFlag );
     4fe:	80 91 51 01 	lds	r24, 0x0151
     502:	88 23       	and	r24, r24
     504:	e1 f7       	brne	.-8      	; 0x4fe <RxGetChannels+0x2c>

	RxChannel = RxChannel2;
     506:	80 91 3a 01 	lds	r24, 0x013A
     50a:	90 91 3b 01 	lds	r25, 0x013B
	RxChannel -= Config.RxChannel2ZeroOffset;		// normalise
	RxInPitch = (RxChannel >> 2);                   //     "
     50e:	20 91 5c 01 	lds	r18, 0x015C
     512:	30 91 5d 01 	lds	r19, 0x015D
     516:	82 1b       	sub	r24, r18
     518:	93 0b       	sbc	r25, r19
     51a:	95 95       	asr	r25
     51c:	87 95       	ror	r24
     51e:	95 95       	asr	r25
     520:	87 95       	ror	r24
     522:	90 93 43 01 	sts	0x0143, r25
     526:	80 93 42 01 	sts	0x0142, r24

	while ( RxChannelsUpdatingFlag );
     52a:	80 91 51 01 	lds	r24, 0x0151
     52e:	88 23       	and	r24, r24
     530:	e1 f7       	brne	.-8      	; 0x52a <__stack+0x2b>

	RxChannel = RxChannel3;
     532:	80 91 4f 01 	lds	r24, 0x014F
     536:	90 91 50 01 	lds	r25, 0x0150
	RxChannel -= Config.RxChannel3ZeroOffset;		// scale 0->100
	RxInCollective = (RxChannel >> 3);              // 
     53a:	20 91 5e 01 	lds	r18, 0x015E
     53e:	30 91 5f 01 	lds	r19, 0x015F
     542:	82 1b       	sub	r24, r18
     544:	93 0b       	sbc	r25, r19
     546:	a3 e0       	ldi	r26, 0x03	; 3
     548:	95 95       	asr	r25
     54a:	87 95       	ror	r24
     54c:	aa 95       	dec	r26
     54e:	e1 f7       	brne	.-8      	; 0x548 <__stack+0x49>
     550:	90 93 1a 01 	sts	0x011A, r25
     554:	80 93 19 01 	sts	0x0119, r24

	while ( RxChannelsUpdatingFlag );
     558:	80 91 51 01 	lds	r24, 0x0151
     55c:	88 23       	and	r24, r24
     55e:	e1 f7       	brne	.-8      	; 0x558 <__stack+0x59>

	RxChannel = RxChannel4;
     560:	80 91 26 01 	lds	r24, 0x0126
     564:	90 91 27 01 	lds	r25, 0x0127
	RxChannel -= Config.RxChannel4ZeroOffset;		// normalise
     568:	20 91 60 01 	lds	r18, 0x0160
     56c:	30 91 61 01 	lds	r19, 0x0161
     570:	82 1b       	sub	r24, r18
     572:	93 0b       	sbc	r25, r19
     574:	90 93 14 01 	sts	0x0114, r25
     578:	80 93 13 01 	sts	0x0113, r24
	RxInYaw = (RxChannel >> 2);                     //     "
     57c:	95 95       	asr	r25
     57e:	87 95       	ror	r24
     580:	95 95       	asr	r25
     582:	87 95       	ror	r24
     584:	90 93 2b 01 	sts	0x012B, r25
     588:	80 93 2a 01 	sts	0x012A, r24

}
     58c:	08 95       	ret

0000058e <output_motor_ppm>:
#ifdef TRI_COPTER
	static uint8_t ServoPPMRateCount;
#endif

	// if ESC's are high, we need to turn them off
	if (output_motor_high)
     58e:	80 91 08 01 	lds	r24, 0x0108
     592:	88 23       	and	r24, r24
     594:	09 f4       	brne	.+2      	; 0x598 <output_motor_ppm+0xa>
     596:	db c0       	rjmp	.+438    	; 0x74e <output_motor_ppm+0x1c0>
	{
		// set motor limits (0 -> 100)
		if ( MotorOut1 < 0 ) MotorOut1 = 0;
     598:	80 91 21 01 	lds	r24, 0x0121
     59c:	90 91 22 01 	lds	r25, 0x0122
     5a0:	97 ff       	sbrs	r25, 7
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <output_motor_ppm+0x20>
     5a4:	10 92 22 01 	sts	0x0122, r1
     5a8:	10 92 21 01 	sts	0x0121, r1
     5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <output_motor_ppm+0x32>
		else if ( MotorOut1 > 100 ) MotorOut1 = 100;
     5ae:	85 36       	cpi	r24, 0x65	; 101
     5b0:	91 05       	cpc	r25, r1
     5b2:	34 f0       	brlt	.+12     	; 0x5c0 <output_motor_ppm+0x32>
     5b4:	84 e6       	ldi	r24, 0x64	; 100
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 22 01 	sts	0x0122, r25
     5bc:	80 93 21 01 	sts	0x0121, r24
		if ( MotorOut2 < 0 ) MotorOut2 = 0;
     5c0:	80 91 2c 01 	lds	r24, 0x012C
     5c4:	90 91 2d 01 	lds	r25, 0x012D
     5c8:	97 ff       	sbrs	r25, 7
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <output_motor_ppm+0x48>
     5cc:	10 92 2d 01 	sts	0x012D, r1
     5d0:	10 92 2c 01 	sts	0x012C, r1
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <output_motor_ppm+0x5a>
		else if ( MotorOut2 > 100 ) MotorOut2 = 100;
     5d6:	85 36       	cpi	r24, 0x65	; 101
     5d8:	91 05       	cpc	r25, r1
     5da:	34 f0       	brlt	.+12     	; 0x5e8 <output_motor_ppm+0x5a>
     5dc:	84 e6       	ldi	r24, 0x64	; 100
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	90 93 2d 01 	sts	0x012D, r25
     5e4:	80 93 2c 01 	sts	0x012C, r24
		if ( MotorOut3 < 0 ) MotorOut3 = 0;
     5e8:	80 91 3e 01 	lds	r24, 0x013E
     5ec:	90 91 3f 01 	lds	r25, 0x013F
     5f0:	97 ff       	sbrs	r25, 7
     5f2:	05 c0       	rjmp	.+10     	; 0x5fe <output_motor_ppm+0x70>
     5f4:	10 92 3f 01 	sts	0x013F, r1
     5f8:	10 92 3e 01 	sts	0x013E, r1
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <output_motor_ppm+0x82>
		else if ( MotorOut3 > 100 ) MotorOut3 = 100;
     5fe:	85 36       	cpi	r24, 0x65	; 101
     600:	91 05       	cpc	r25, r1
     602:	34 f0       	brlt	.+12     	; 0x610 <output_motor_ppm+0x82>
     604:	84 e6       	ldi	r24, 0x64	; 100
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 3f 01 	sts	0x013F, r25
     60c:	80 93 3e 01 	sts	0x013E, r24
		if ( MotorOut4 < 0 ) MotorOut4 = 0;
     610:	80 91 32 01 	lds	r24, 0x0132
     614:	90 91 33 01 	lds	r25, 0x0133
     618:	97 ff       	sbrs	r25, 7
     61a:	05 c0       	rjmp	.+10     	; 0x626 <output_motor_ppm+0x98>
     61c:	10 92 33 01 	sts	0x0133, r1
     620:	10 92 32 01 	sts	0x0132, r1
     624:	09 c0       	rjmp	.+18     	; 0x638 <output_motor_ppm+0xaa>
		else if ( MotorOut4 > 100 ) MotorOut4 = 100;
     626:	85 36       	cpi	r24, 0x65	; 101
     628:	91 05       	cpc	r25, r1
     62a:	34 f0       	brlt	.+12     	; 0x638 <output_motor_ppm+0xaa>
     62c:	84 e6       	ldi	r24, 0x64	; 100
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	90 93 33 01 	sts	0x0133, r25
     634:	80 93 32 01 	sts	0x0132, r24
		if ( MotorOut6 < 0 ) MotorOut6 = 0;
		else if ( MotorOut6 > 100 ) MotorOut6 = 100;
#endif

		// now calculate the time already passed that Motors were HIGH
		ElapsedTCNT1 = (TCNT1 - MotorStartTCNT1);
     638:	80 91 84 00 	lds	r24, 0x0084
     63c:	90 91 85 00 	lds	r25, 0x0085
     640:	20 91 10 01 	lds	r18, 0x0110
     644:	30 91 11 01 	lds	r19, 0x0111
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	90 93 0f 01 	sts	0x010F, r25
     650:	80 93 0e 01 	sts	0x010E, r24

		// start output timer
		TIFR0 &= ~(1 << TOV0);			// clr overflow
     654:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     656:	16 bc       	out	0x26, r1	; 38

		// convert into 10uS intervals
		num_of_10uS = (ElapsedTCNT1 / 10) + 1;
     658:	6a e0       	ldi	r22, 0x0A	; 10
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	0e 94 86 08 	call	0x110c	; 0x110c <__udivmodhi4>
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	60 93 09 01 	sts	0x0109, r22
		MotorAdjust = 100 - num_of_10uS;
     666:	26 2f       	mov	r18, r22
     668:	33 27       	eor	r19, r19
     66a:	27 fd       	sbrc	r18, 7
     66c:	30 95       	com	r19
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	82 1b       	sub	r24, r18
     674:	93 0b       	sbc	r25, r19
     676:	90 93 0d 01 	sts	0x010D, r25
     67a:	80 93 0c 01 	sts	0x010C, r24

		// add adjustment (1mS - time already gone) to all channels
		MotorOut1 += MotorAdjust;
     67e:	a0 91 21 01 	lds	r26, 0x0121
     682:	b0 91 22 01 	lds	r27, 0x0122
     686:	a8 0f       	add	r26, r24
     688:	b9 1f       	adc	r27, r25
		MotorOut2 += MotorAdjust;
     68a:	e0 91 2c 01 	lds	r30, 0x012C
     68e:	f0 91 2d 01 	lds	r31, 0x012D
     692:	e8 0f       	add	r30, r24
     694:	f9 1f       	adc	r31, r25
		MotorOut3 += MotorAdjust;
     696:	40 91 3e 01 	lds	r20, 0x013E
     69a:	50 91 3f 01 	lds	r21, 0x013F
     69e:	48 0f       	add	r20, r24
     6a0:	59 1f       	adc	r21, r25
		MotorOut4 += MotorAdjust;
     6a2:	20 91 32 01 	lds	r18, 0x0132
     6a6:	30 91 33 01 	lds	r19, 0x0133
     6aa:	28 0f       	add	r18, r24
     6ac:	39 1f       	adc	r19, r25

		// keep signal on for correct time
		// MotorOutX = 100 -> 200
		// Pulse len = 1   -> 2    mS

		TIFR0 &= ~(1 << TOV0);			// clr overflow
     6ae:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     6b0:	16 bc       	out	0x26, r1	; 38
     6b2:	1f c0       	rjmp	.+62     	; 0x6f2 <output_motor_ppm+0x164>

		for (i=num_of_10uS;i<200;i++)	
		{
			while (TCNT0 < 80);			// 10uS @ 8MHz = 80 // 10 @ 1MHz = 10uS
     6b4:	86 b5       	in	r24, 0x26	; 38
     6b6:	80 35       	cpi	r24, 0x50	; 80
     6b8:	e8 f3       	brcs	.-6      	; 0x6b4 <output_motor_ppm+0x126>
			TCNT0 -= 80;
     6ba:	86 b5       	in	r24, 0x26	; 38
     6bc:	80 55       	subi	r24, 0x50	; 80
     6be:	86 bd       	out	0x26, r24	; 38

			if (MotorOut1) 
     6c0:	10 97       	sbiw	r26, 0x00	; 0
     6c2:	19 f0       	breq	.+6      	; 0x6ca <output_motor_ppm+0x13c>
			{
				MotorOut1--;
     6c4:	11 97       	sbiw	r26, 0x01	; 1
				if (MotorOut1==0) M1 = 0;
     6c6:	09 f4       	brne	.+2      	; 0x6ca <output_motor_ppm+0x13c>
     6c8:	2a 98       	cbi	0x05, 2	; 5
			}
			if (MotorOut2) 
     6ca:	30 97       	sbiw	r30, 0x00	; 0
     6cc:	19 f0       	breq	.+6      	; 0x6d4 <output_motor_ppm+0x146>
			{
				MotorOut2--;
     6ce:	31 97       	sbiw	r30, 0x01	; 1
				if (MotorOut2==0) M2 = 0;
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <output_motor_ppm+0x146>
     6d2:	29 98       	cbi	0x05, 1	; 5
			}
			if (MotorOut3) 
     6d4:	41 15       	cp	r20, r1
     6d6:	51 05       	cpc	r21, r1
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <output_motor_ppm+0x154>
			{
				MotorOut3--;
     6da:	41 50       	subi	r20, 0x01	; 1
     6dc:	50 40       	sbci	r21, 0x00	; 0
				if (MotorOut3==0) M3 = 0;
     6de:	09 f4       	brne	.+2      	; 0x6e2 <output_motor_ppm+0x154>
     6e0:	28 98       	cbi	0x05, 0	; 5
			}
			if (MotorOut4) 
     6e2:	21 15       	cp	r18, r1
     6e4:	31 05       	cpc	r19, r1
     6e6:	21 f0       	breq	.+8      	; 0x6f0 <output_motor_ppm+0x162>
			{
				MotorOut4--;
     6e8:	21 50       	subi	r18, 0x01	; 1
     6ea:	30 40       	sbci	r19, 0x00	; 0
				if (MotorOut4==0) M4 = 0;
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <output_motor_ppm+0x162>
     6ee:	5f 98       	cbi	0x0b, 7	; 11
     6f0:	6f 5f       	subi	r22, 0xFF	; 255
		// Pulse len = 1   -> 2    mS

		TIFR0 &= ~(1 << TOV0);			// clr overflow
		TCNT0 = 0;						// reset counter

		for (i=num_of_10uS;i<200;i++)	
     6f2:	68 3c       	cpi	r22, 0xC8	; 200
     6f4:	f8 f2       	brcs	.-66     	; 0x6b4 <output_motor_ppm+0x126>
     6f6:	b0 93 22 01 	sts	0x0122, r27
     6fa:	a0 93 21 01 	sts	0x0121, r26
     6fe:	f0 93 2d 01 	sts	0x012D, r31
     702:	e0 93 2c 01 	sts	0x012C, r30
     706:	50 93 3f 01 	sts	0x013F, r21
     70a:	40 93 3e 01 	sts	0x013E, r20
     70e:	30 93 33 01 	sts	0x0133, r19
     712:	20 93 32 01 	sts	0x0132, r18
     716:	60 93 12 01 	sts	0x0112, r22
			}
#endif
		}

		//Now wait low signal interval
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;
     71a:	20 91 00 01 	lds	r18, 0x0100
     71e:	30 91 01 01 	lds	r19, 0x0101
     722:	21 50       	subi	r18, 0x01	; 1
     724:	30 40       	sbci	r19, 0x00	; 0

		TIFR0 &= ~(1 << TOV0);		// clr overflow
     726:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;					// reset counter
     728:	16 bc       	out	0x26, r1	; 38
     72a:	08 c0       	rjmp	.+16     	; 0x73c <output_motor_ppm+0x1ae>

		while (PWM_Low_Count--)
		{
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
     72c:	86 b5       	in	r24, 0x26	; 38
     72e:	80 35       	cpi	r24, 0x50	; 80
     730:	e8 f3       	brcs	.-6      	; 0x72c <output_motor_ppm+0x19e>
			TCNT0 -= 80;
     732:	86 b5       	in	r24, 0x26	; 38
     734:	80 55       	subi	r24, 0x50	; 80
     736:	86 bd       	out	0x26, r24	; 38
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	30 40       	sbci	r19, 0x00	; 0
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;

		TIFR0 &= ~(1 << TOV0);		// clr overflow
		TCNT0 = 0;					// reset counter

		while (PWM_Low_Count--)
     73c:	21 15       	cp	r18, r1
     73e:	31 05       	cpc	r19, r1
     740:	a9 f7       	brne	.-22     	; 0x72c <output_motor_ppm+0x19e>
     742:	8f ef       	ldi	r24, 0xFF	; 255
     744:	9f ef       	ldi	r25, 0xFF	; 255
     746:	90 93 0b 01 	sts	0x010B, r25
     74a:	80 93 0a 01 	sts	0x010A, r24
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
			TCNT0 -= 80;
		}
	}

	if (! Armed) return;
     74e:	80 91 44 01 	lds	r24, 0x0144
     752:	88 23       	and	r24, r24
     754:	79 f0       	breq	.+30     	; 0x774 <output_motor_ppm+0x1e6>

	// Log PWM signal HIGH	
	MotorStartTCNT1 = TCNT1;
     756:	80 91 84 00 	lds	r24, 0x0084
     75a:	90 91 85 00 	lds	r25, 0x0085
     75e:	90 93 11 01 	sts	0x0111, r25
     762:	80 93 10 01 	sts	0x0110, r24
	output_motor_high = true;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 08 01 	sts	0x0108, r24

	// turn on pins
	M1 = 1;
     76c:	2a 9a       	sbi	0x05, 2	; 5
	M2 = 1;
     76e:	29 9a       	sbi	0x05, 1	; 5
	M3 = 1;
     770:	28 9a       	sbi	0x05, 0	; 5
		ServoPPMRateCount = 1;
	} else {
		ServoPPMRateCount++;
	}
#else
	M4 = 1;
     772:	5f 9a       	sbi	0x0b, 7	; 11
     774:	08 95       	ret

00000776 <Set_EEPROM_Default_Config>:
	}
}

void Set_EEPROM_Default_Config(void)
{
	Config.RollGyroDirection 		= GYRO_REVERSED;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 57 01 	sts	0x0157, r24
	Config.PitchGyroDirection		= GYRO_REVERSED;
     77c:	80 93 58 01 	sts	0x0158, r24
	Config.YawGyroDirection			= GYRO_NORMAL;
     780:	10 92 59 01 	sts	0x0159, r1

	Config.RxChannel1ZeroOffset	= 1520;
     784:	20 ef       	ldi	r18, 0xF0	; 240
     786:	35 e0       	ldi	r19, 0x05	; 5
     788:	30 93 5b 01 	sts	0x015B, r19
     78c:	20 93 5a 01 	sts	0x015A, r18
	Config.RxChannel2ZeroOffset	= 1520;
     790:	30 93 5d 01 	sts	0x015D, r19
     794:	20 93 5c 01 	sts	0x015C, r18
	Config.RxChannel3ZeroOffset	= 1120;
     798:	80 e6       	ldi	r24, 0x60	; 96
     79a:	94 e0       	ldi	r25, 0x04	; 4
     79c:	90 93 5f 01 	sts	0x015F, r25
     7a0:	80 93 5e 01 	sts	0x015E, r24
	Config.RxChannel4ZeroOffset	= 1520;
     7a4:	30 93 61 01 	sts	0x0161, r19
     7a8:	20 93 60 01 	sts	0x0160, r18
}
     7ac:	08 95       	ret

000007ae <delay_us>:

//////////////////////////////////////////////////////////
// Minsoo Kim

void delay_us(uint8_t time)            /* time delay for us */
{ 
     7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <delay_us+0x12>
	...
  asm volatile ("NOP"); asm volatile ("NOP"); 
  asm volatile ("NOP"); asm volatile ("NOP"); 
  asm volatile ("NOP"); asm volatile ("NOP"); 
 // asm volatile ("NOP"); asm volatile ("NOP"); 
 // asm volatile ("NOP"); asm volatile ("NOP"); 
  asm volatile ("NOP"); 
     7bc:	00 00       	nop
     7be:	81 50       	subi	r24, 0x01	; 1
//////////////////////////////////////////////////////////
// Minsoo Kim

void delay_us(uint8_t time)            /* time delay for us */
{ 
 while(time--)
     7c0:	88 23       	and	r24, r24
     7c2:	b1 f7       	brne	.-20     	; 0x7b0 <delay_us+0x2>
  asm volatile ("NOP"); asm volatile ("NOP"); 
 // asm volatile ("NOP"); asm volatile ("NOP"); 
 // asm volatile ("NOP"); asm volatile ("NOP"); 
  asm volatile ("NOP"); 
 }
}
     7c4:	08 95       	ret

000007c6 <delay_ms>:

void delay_ms(uint16_t time)
{
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ec 01       	movw	r28, r24
     7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <delay_ms+0x1a>
	uint8_t i;
	while(time--)
     7d0:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;i<10;i++) delay_us(100);
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <delay_us>
     7d8:	1f 5f       	subi	r17, 0xFF	; 255
     7da:	1a 30       	cpi	r17, 0x0A	; 10
     7dc:	d1 f7       	brne	.-12     	; 0x7d2 <delay_ms+0xc>
     7de:	21 97       	sbiw	r28, 0x01	; 1
}

void delay_ms(uint16_t time)
{
	uint8_t i;
	while(time--)
     7e0:	20 97       	sbiw	r28, 0x00	; 0
     7e2:	b1 f7       	brne	.-20     	; 0x7d0 <delay_ms+0xa>
	{
		for(i=0;i<10;i++) delay_us(100);
	}
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	08 95       	ret

000007ec <loop>:
		}
	}
}

void loop(void)
{
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
	static uint8_t i;
	static uint16_t Change_Arming=0;
	static uint8_t Arming_TCNT2=0;

	RxGetChannels();
     7f8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <RxGetChannels>

	if (RxInCollective < 0) {
     7fc:	80 91 19 01 	lds	r24, 0x0119
     800:	90 91 1a 01 	lds	r25, 0x011A
     804:	97 ff       	sbrs	r25, 7
     806:	43 c1       	rjmp	.+646    	; 0xa8e <loop+0x2a2>
		// check for stick arming (Timer2 @ 8MHz/1024 = 7812.5KHz)
		// arm: yaw right (>60), dis-arm: yaw left (<-60)
		Change_Arming += (uint8_t) (TCNT2 - Arming_TCNT2);
     808:	20 91 b2 00 	lds	r18, 0x00B2
     80c:	80 91 15 01 	lds	r24, 0x0115
     810:	28 1b       	sub	r18, r24
     812:	80 91 16 01 	lds	r24, 0x0116
     816:	90 91 17 01 	lds	r25, 0x0117
     81a:	82 0f       	add	r24, r18
     81c:	91 1d       	adc	r25, r1
     81e:	90 93 17 01 	sts	0x0117, r25
     822:	80 93 16 01 	sts	0x0116, r24
		Arming_TCNT2 = TCNT2;
     826:	80 91 b2 00 	lds	r24, 0x00B2
     82a:	80 93 15 01 	sts	0x0115, r24

		if (!Armed) {		// nb to switch to Right-Side Arming: if (!Armed) {
     82e:	20 91 44 01 	lds	r18, 0x0144
     832:	80 91 2a 01 	lds	r24, 0x012A
     836:	90 91 2b 01 	lds	r25, 0x012B
     83a:	22 23       	and	r18, r18
     83c:	19 f4       	brne	.+6      	; 0x844 <loop+0x58>
			if (RxInYaw<STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count
     83e:	cc 97       	sbiw	r24, 0x3c	; 60
     840:	7c f0       	brlt	.+30     	; 0x860 <loop+0x74>
     842:	03 c0       	rjmp	.+6      	; 0x84a <loop+0x5e>
		} else {
			if (RxInYaw>-STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count, Minsoo
     844:	85 5c       	subi	r24, 0xC5	; 197
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	5c f4       	brge	.+22     	; 0x860 <loop+0x74>
     84a:	80 91 42 01 	lds	r24, 0x0142
     84e:	90 91 43 01 	lds	r25, 0x0143
     852:	97 ff       	sbrs	r25, 7
     854:	03 c0       	rjmp	.+6      	; 0x85c <loop+0x70>
     856:	90 95       	com	r25
     858:	81 95       	neg	r24
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	4f 97       	sbiw	r24, 0x1f	; 31
     85e:	24 f0       	brlt	.+8      	; 0x868 <loop+0x7c>
     860:	10 92 17 01 	sts	0x0117, r1
     864:	10 92 16 01 	sts	0x0116, r1
		}

		// 3Sec / 0.000128 = 23437 = 0x5B8D or 
		// 2.5Sec / 0.000128 = 19531 = 0x4C4B
		// 0.5Sec / 0.000128 = 3906 = 0x0F42	// Minsoo
		if (Change_Arming>0x0F42)
     868:	80 91 16 01 	lds	r24, 0x0116
     86c:	90 91 17 01 	lds	r25, 0x0117
     870:	83 54       	subi	r24, 0x43	; 67
     872:	9f 40       	sbci	r25, 0x0F	; 15
     874:	10 f1       	brcs	.+68     	; 0x8ba <loop+0xce>
		{
			Armed = ! Armed;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	82 27       	eor	r24, r18
     87a:	80 93 44 01 	sts	0x0144, r24
			LED = 0;
     87e:	2e 98       	cbi	0x05, 6	; 5
			ModeDelayCounter = 0;
     880:	10 92 55 01 	sts	0x0155, r1
     884:	10 92 54 01 	sts	0x0154, r1

			if (Armed) {
     888:	88 23       	and	r24, r24
     88a:	a1 f0       	breq	.+40     	; 0x8b4 <loop+0xc8>
				CalibrateGyros();
     88c:	0e 94 09 02 	call	0x412	; 0x412 <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     890:	10 92 08 01 	sts	0x0108, r1
				LED = 1;
     894:	2e 9a       	sbi	0x05, 6	; 5

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     896:	82 e3       	ldi	r24, 0x32	; 50
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	90 93 3d 01 	sts	0x013D, r25
     89e:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     8a2:	90 93 2f 01 	sts	0x012F, r25
     8a6:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     8aa:	90 93 41 01 	sts	0x0141, r25
     8ae:	80 93 40 01 	sts	0x0140, r24
     8b2:	38 c2       	rjmp	.+1136   	; 0xd24 <loop+0x538>
			} else if (output_motor_high) {
     8b4:	80 91 08 01 	lds	r24, 0x0108
     8b8:	31 c2       	rjmp	.+1122   	; 0xd1c <loop+0x530>
		}

		// --- Calibrate gyro when collective below 1% ---
		//if ( RxInCollective < 1 && Armed && abs(RxInRoll) <20 && abs(RxInPitch) <20)
		// --- Normal Mode: Calibrate gyro when Thr: Low, Elevator: Down, Rudder: Left --- (Minsoo)
		if (Armed && RxInYaw < -STICK_ARMING && RxInPitch > STICK_ARMING)
     8ba:	22 23       	and	r18, r18
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <loop+0xd4>
     8be:	4c c0       	rjmp	.+152    	; 0x958 <loop+0x16c>
     8c0:	80 91 2a 01 	lds	r24, 0x012A
     8c4:	90 91 2b 01 	lds	r25, 0x012B
     8c8:	84 5c       	subi	r24, 0xC4	; 196
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	0c f0       	brlt	.+2      	; 0x8d0 <loop+0xe4>
     8ce:	44 c0       	rjmp	.+136    	; 0x958 <loop+0x16c>
     8d0:	80 91 42 01 	lds	r24, 0x0142
     8d4:	90 91 43 01 	lds	r25, 0x0143
     8d8:	cd 97       	sbiw	r24, 0x3d	; 61
     8da:	f4 f1       	brlt	.+124    	; 0x958 <loop+0x16c>
		{
			if (ModeDelayCounter==0)
     8dc:	80 91 54 01 	lds	r24, 0x0154
     8e0:	90 91 55 01 	lds	r25, 0x0155
     8e4:	89 2b       	or	r24, r25
     8e6:	79 f5       	brne	.+94     	; 0x946 <loop+0x15a>
			{
				//ModeDelayCounter = 0xFB4F; // 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	 // 0xFFFF-FE6F=0x190=400/400 = 1Seconds (Minsoo)
     8e8:	8f e6       	ldi	r24, 0x6F	; 111
     8ea:	9e ef       	ldi	r25, 0xFE	; 254
     8ec:	90 93 55 01 	sts	0x0155, r25
     8f0:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     8f4:	0e 94 09 02 	call	0x412	; 0x412 <CalibrateGyros>
				output_motor_high = false;	 // re-set 1st time flag
     8f8:	10 92 08 01 	sts	0x0108, r1
				delay_ms(100);
     8fc:	84 e6       	ldi	r24, 0x64	; 100
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     904:	82 e3       	ldi	r24, 0x32	; 50
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 3d 01 	sts	0x013D, r25
     90c:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     910:	90 93 2f 01 	sts	0x012F, r25
     914:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     918:	90 93 41 01 	sts	0x0141, r25
     91c:	80 93 40 01 	sts	0x0140, r24

				// flash LED 2 times
				for (i=0;i<2;i++)
     920:	10 92 18 01 	sts	0x0118, r1
     924:	10 e0       	ldi	r17, 0x00	; 0
     926:	0b c0       	rjmp	.+22     	; 0x93e <loop+0x152>
				{
					LED = 0;
     928:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     92a:	89 e1       	ldi	r24, 0x19	; 25
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
					LED = 1;
     932:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     934:	89 e1       	ldi	r24, 0x19	; 25
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
     93c:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
				StickYawGain = NORMAL_STICK_YAW_GAIN;

				// flash LED 2 times
				for (i=0;i<2;i++)
     93e:	12 30       	cpi	r17, 0x02	; 2
     940:	98 f3       	brcs	.-26     	; 0x928 <loop+0x13c>
     942:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     946:	80 91 54 01 	lds	r24, 0x0154
     94a:	90 91 55 01 	lds	r25, 0x0155
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	90 93 55 01 	sts	0x0155, r25
     954:	80 93 54 01 	sts	0x0154, r24
		}


		// --- Acro Mode when Thr: Low, Elevator: Up, Rudder: Left --- (Minsoo)
		if (Armed && RxInYaw < -STICK_ARMING && RxInPitch < -STICK_ARMING)
     958:	80 91 44 01 	lds	r24, 0x0144
     95c:	88 23       	and	r24, r24
     95e:	09 f4       	brne	.+2      	; 0x962 <loop+0x176>
     960:	49 c0       	rjmp	.+146    	; 0x9f4 <loop+0x208>
     962:	80 91 2a 01 	lds	r24, 0x012A
     966:	90 91 2b 01 	lds	r25, 0x012B
     96a:	84 5c       	subi	r24, 0xC4	; 196
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	0c f0       	brlt	.+2      	; 0x972 <loop+0x186>
     970:	41 c0       	rjmp	.+130    	; 0x9f4 <loop+0x208>
     972:	80 91 42 01 	lds	r24, 0x0142
     976:	90 91 43 01 	lds	r25, 0x0143
     97a:	84 5c       	subi	r24, 0xC4	; 196
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	d4 f5       	brge	.+116    	; 0x9f4 <loop+0x208>
		{
			if (ModeDelayCounter==0)
     980:	80 91 54 01 	lds	r24, 0x0154
     984:	90 91 55 01 	lds	r25, 0x0155
     988:	89 2b       	or	r24, r25
     98a:	59 f5       	brne	.+86     	; 0x9e2 <loop+0x1f6>
			{
				//ModeDelayCounter = 0xFB4F; // 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	 // 0xFFFF-FE6F=0x190=400/400 = 1Seconds (Minsoo)
     98c:	8f e6       	ldi	r24, 0x6F	; 111
     98e:	9e ef       	ldi	r25, 0xFE	; 254
     990:	90 93 55 01 	sts	0x0155, r25
     994:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     998:	0e 94 09 02 	call	0x412	; 0x412 <CalibrateGyros>
				output_motor_high = false;	 // re-set 1st time flag
     99c:	10 92 08 01 	sts	0x0108, r1

				// Acro
				StickRollGain = ACRO_STICK_ROLL_GAIN;
     9a0:	81 e4       	ldi	r24, 0x41	; 65
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	90 93 3d 01 	sts	0x013D, r25
     9a8:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = ACRO_STICK_PITCH_GAIN;
     9ac:	90 93 2f 01 	sts	0x012F, r25
     9b0:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = ACRO_STICK_YAW_GAIN;
     9b4:	90 93 41 01 	sts	0x0141, r25
     9b8:	80 93 40 01 	sts	0x0140, r24

				// flash LED 4 times
				for (i=0;i<4;i++)
     9bc:	10 92 18 01 	sts	0x0118, r1
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	0b c0       	rjmp	.+22     	; 0x9da <loop+0x1ee>
				{
					LED = 0;
     9c4:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     9c6:	89 e1       	ldi	r24, 0x19	; 25
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
					LED = 1;
     9ce:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     9d0:	89 e1       	ldi	r24, 0x19	; 25
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
     9d8:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = ACRO_STICK_ROLL_GAIN;
				StickPitchGain = ACRO_STICK_PITCH_GAIN;
				StickYawGain = ACRO_STICK_YAW_GAIN;

				// flash LED 4 times
				for (i=0;i<4;i++)
     9da:	14 30       	cpi	r17, 0x04	; 4
     9dc:	98 f3       	brcs	.-26     	; 0x9c4 <loop+0x1d8>
     9de:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     9e2:	80 91 54 01 	lds	r24, 0x0154
     9e6:	90 91 55 01 	lds	r25, 0x0155
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	90 93 55 01 	sts	0x0155, r25
     9f0:	80 93 54 01 	sts	0x0154, r24
		}

		// --- UFO Mode when Thr: Low, Elevator: Up, Rudder: Right --- (Minsoo)
		if (Armed && RxInYaw > STICK_ARMING && RxInPitch < -STICK_ARMING)
     9f4:	80 91 44 01 	lds	r24, 0x0144
     9f8:	88 23       	and	r24, r24
     9fa:	09 f4       	brne	.+2      	; 0x9fe <loop+0x212>
     9fc:	48 c0       	rjmp	.+144    	; 0xa8e <loop+0x2a2>
     9fe:	80 91 2a 01 	lds	r24, 0x012A
     a02:	90 91 2b 01 	lds	r25, 0x012B
     a06:	cd 97       	sbiw	r24, 0x3d	; 61
     a08:	0c f4       	brge	.+2      	; 0xa0c <loop+0x220>
     a0a:	41 c0       	rjmp	.+130    	; 0xa8e <loop+0x2a2>
     a0c:	80 91 42 01 	lds	r24, 0x0142
     a10:	90 91 43 01 	lds	r25, 0x0143
     a14:	84 5c       	subi	r24, 0xC4	; 196
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	d4 f5       	brge	.+116    	; 0xa8e <loop+0x2a2>
		{
			if (ModeDelayCounter==0)
     a1a:	80 91 54 01 	lds	r24, 0x0154
     a1e:	90 91 55 01 	lds	r25, 0x0155
     a22:	89 2b       	or	r24, r25
     a24:	59 f5       	brne	.+86     	; 0xa7c <loop+0x290>
			{
				//ModeDelayCounter = 0xFB4F; // 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	 // 0xFFFF-FE6F=0x190=400/400 = 1Seconds (Minsoo)
     a26:	8f e6       	ldi	r24, 0x6F	; 111
     a28:	9e ef       	ldi	r25, 0xFE	; 254
     a2a:	90 93 55 01 	sts	0x0155, r25
     a2e:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     a32:	0e 94 09 02 	call	0x412	; 0x412 <CalibrateGyros>
				output_motor_high = false;	 // re-set 1st time flag
     a36:	10 92 08 01 	sts	0x0108, r1
		
				// Acro
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     a3a:	82 e3       	ldi	r24, 0x32	; 50
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	90 93 3d 01 	sts	0x013D, r25
     a42:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     a46:	90 93 2f 01 	sts	0x012F, r25
     a4a:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = UFO_STICK_YAW_GAIN;
     a4e:	8a e5       	ldi	r24, 0x5A	; 90
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	90 93 41 01 	sts	0x0141, r25
     a56:	80 93 40 01 	sts	0x0140, r24
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	0b c0       	rjmp	.+22     	; 0xa74 <loop+0x288>
		
				// flash LED 4 times
				for (i=0;i<4;i++)
				{
					LED = 0;
     a5e:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     a60:	89 e1       	ldi	r24, 0x19	; 25
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
					LED = 1;
     a68:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     a6a:	89 e1       	ldi	r24, 0x19	; 25
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
     a72:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
				StickYawGain = UFO_STICK_YAW_GAIN;
		
				// flash LED 4 times
				for (i=0;i<4;i++)
     a74:	14 30       	cpi	r17, 0x04	; 4
     a76:	98 f3       	brcs	.-26     	; 0xa5e <loop+0x272>
     a78:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     a7c:	80 91 54 01 	lds	r24, 0x0154
     a80:	90 91 55 01 	lds	r25, 0x0155
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	90 93 55 01 	sts	0x0155, r25
     a8a:	80 93 54 01 	sts	0x0154, r24
		}

	}

	//--- Read gyros ---
	ReadGyros(false);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 9c 01 	call	0x338	; 0x338 <ReadGyros>

	//--- Start mixing by setting collective to motor input 1,2,3 and 4 ---
	if (RxInCollective > MAX_COLLECTIVE) RxInCollective = MAX_COLLECTIVE;
     a94:	80 91 19 01 	lds	r24, 0x0119
     a98:	90 91 1a 01 	lds	r25, 0x011A
     a9c:	8b 35       	cpi	r24, 0x5B	; 91
     a9e:	91 05       	cpc	r25, r1
     aa0:	34 f0       	brlt	.+12     	; 0xaae <loop+0x2c2>
     aa2:	8a e5       	ldi	r24, 0x5A	; 90
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	90 93 1a 01 	sts	0x011A, r25
     aaa:	80 93 19 01 	sts	0x0119, r24
	MotorOut1 = RxInCollective;
     aae:	c0 91 19 01 	lds	r28, 0x0119
     ab2:	d0 91 1a 01 	lds	r29, 0x011A
	MotorOut6 = RxInCollective;
#endif
	//--- Calculate roll gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[ROLL] = gyroADC[ROLL] * GainIn[ROLL] * ROLL_GAIN_MULTIPLIER;		// Minsoo, 100 * 50 * 3 = 15000	150 * 50 * 3 = 22500		250 * 50 * 3 = 37500
	gyroADC[ROLL] /= ADC_GAIN_DIVIDER;											// Minsoo, 15000/150 = 100		22500/225 = 100		37500/375 = 100
     ab6:	80 91 34 01 	lds	r24, 0x0134
     aba:	90 91 35 01 	lds	r25, 0x0135
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	20 91 1b 01 	lds	r18, 0x011B
     ac6:	30 91 1c 01 	lds	r19, 0x011C
     aca:	ac 01       	movw	r20, r24
     acc:	42 9f       	mul	r20, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	43 9f       	mul	r20, r19
     ad2:	90 0d       	add	r25, r0
     ad4:	52 9f       	mul	r21, r18
     ad6:	90 0d       	add	r25, r0
     ad8:	11 24       	eor	r1, r1
     ada:	68 ec       	ldi	r22, 0xC8	; 200
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divmodhi4>
     ae2:	fb 01       	movw	r30, r22
     ae4:	70 93 1c 01 	sts	0x011C, r23
     ae8:	60 93 1b 01 	sts	0x011B, r22

	// Minsoo
	RxInRoll = (RxInRoll * StickRollGain / 100);	// Stick Controll %
     aec:	20 91 3c 01 	lds	r18, 0x013C
     af0:	30 91 3d 01 	lds	r19, 0x013D
     af4:	80 91 28 01 	lds	r24, 0x0128
     af8:	90 91 29 01 	lds	r25, 0x0129
     afc:	ac 01       	movw	r20, r24
     afe:	24 9f       	mul	r18, r20
     b00:	c0 01       	movw	r24, r0
     b02:	25 9f       	mul	r18, r21
     b04:	90 0d       	add	r25, r0
     b06:	34 9f       	mul	r19, r20
     b08:	90 0d       	add	r25, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	64 e6       	ldi	r22, 0x64	; 100
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divmodhi4>
     b14:	9b 01       	movw	r18, r22

	if (Config.RollGyroDirection == GYRO_NORMAL) {
     b16:	80 91 57 01 	lds	r24, 0x0157
     b1a:	88 23       	and	r24, r24
     b1c:	39 f4       	brne	.+14     	; 0xb2c <loop+0x340>
		RxInRoll += gyroADC[ROLL];
     b1e:	e6 0f       	add	r30, r22
     b20:	f7 1f       	adc	r31, r23
     b22:	f0 93 29 01 	sts	0x0129, r31
     b26:	e0 93 28 01 	sts	0x0128, r30
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <loop+0x34c>
	} else {
		RxInRoll -= gyroADC[ROLL];
     b2c:	2e 1b       	sub	r18, r30
     b2e:	3f 0b       	sbc	r19, r31
     b30:	30 93 29 01 	sts	0x0129, r19
     b34:	20 93 28 01 	sts	0x0128, r18
#ifdef TRI_COPTER
	RxInRoll   = (RxInRoll * 20)/23;	//RxInRollSine 60= 0.866 ~ 20/23 or possibly 7/8
	MotorOut1 += RxInRoll;
	MotorOut2 -= RxInRoll;
#elif defined(QUAD_COPTER)
	MotorOut2 += RxInRoll;
     b38:	e0 90 28 01 	lds	r14, 0x0128
     b3c:	f0 90 29 01 	lds	r15, 0x0129
#endif

	//--- Calculate pitch gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[PITCH] = gyroADC[PITCH] * GainIn[PITCH] * PITCH_GAIN_MULTIPLIER;  
	gyroADC[PITCH] /= ADC_GAIN_DIVIDER;
     b40:	80 91 36 01 	lds	r24, 0x0136
     b44:	90 91 37 01 	lds	r25, 0x0137
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	20 91 1d 01 	lds	r18, 0x011D
     b50:	30 91 1e 01 	lds	r19, 0x011E
     b54:	ac 01       	movw	r20, r24
     b56:	42 9f       	mul	r20, r18
     b58:	c0 01       	movw	r24, r0
     b5a:	43 9f       	mul	r20, r19
     b5c:	90 0d       	add	r25, r0
     b5e:	52 9f       	mul	r21, r18
     b60:	90 0d       	add	r25, r0
     b62:	11 24       	eor	r1, r1
     b64:	68 ec       	ldi	r22, 0xC8	; 200
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divmodhi4>
     b6c:	fb 01       	movw	r30, r22
     b6e:	70 93 1e 01 	sts	0x011E, r23
     b72:	60 93 1d 01 	sts	0x011D, r22

	// Minsoo
	RxInPitch = (RxInPitch * StickPitchGain / 100);	// Stick Controll %
     b76:	20 91 2e 01 	lds	r18, 0x012E
     b7a:	30 91 2f 01 	lds	r19, 0x012F
     b7e:	80 91 42 01 	lds	r24, 0x0142
     b82:	90 91 43 01 	lds	r25, 0x0143
     b86:	ac 01       	movw	r20, r24
     b88:	24 9f       	mul	r18, r20
     b8a:	c0 01       	movw	r24, r0
     b8c:	25 9f       	mul	r18, r21
     b8e:	90 0d       	add	r25, r0
     b90:	34 9f       	mul	r19, r20
     b92:	90 0d       	add	r25, r0
     b94:	11 24       	eor	r1, r1
     b96:	64 e6       	ldi	r22, 0x64	; 100
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divmodhi4>
     b9e:	9b 01       	movw	r18, r22

	if (Config.PitchGyroDirection == GYRO_NORMAL) {	
     ba0:	80 91 58 01 	lds	r24, 0x0158
     ba4:	88 23       	and	r24, r24
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <loop+0x3ca>
		RxInPitch += gyroADC[PITCH];
     ba8:	e6 0f       	add	r30, r22
     baa:	f7 1f       	adc	r31, r23
     bac:	f0 93 43 01 	sts	0x0143, r31
     bb0:	e0 93 42 01 	sts	0x0142, r30
     bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <loop+0x3d6>
	} else {	
		RxInPitch -= gyroADC[PITCH];
     bb6:	2e 1b       	sub	r18, r30
     bb8:	3f 0b       	sbc	r19, r31
     bba:	30 93 43 01 	sts	0x0143, r19
     bbe:	20 93 42 01 	sts	0x0142, r18
	MotorOut3 -= RxInPitch;
	RxInPitch = (RxInPitch >> 1);	// cosine of 60
	MotorOut1 += RxInPitch;
	MotorOut2 += RxInPitch;
#elif defined(QUAD_COPTER)
	MotorOut1 += RxInPitch;
     bc2:	00 91 42 01 	lds	r16, 0x0142
     bc6:	10 91 43 01 	lds	r17, 0x0143
	}
	MotorOut4 = 50 + LowpassOutYaw;
#else
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[YAW] = (gyroADC[YAW] * GainIn[YAW] * YAW_GAIN_MULTIPLIER);
	gyroADC[YAW] /= ADC_GAIN_DIVIDER;
     bca:	80 91 38 01 	lds	r24, 0x0138
     bce:	90 91 39 01 	lds	r25, 0x0139
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	20 91 1f 01 	lds	r18, 0x011F
     bda:	30 91 20 01 	lds	r19, 0x0120
     bde:	ac 01       	movw	r20, r24
     be0:	42 9f       	mul	r20, r18
     be2:	c0 01       	movw	r24, r0
     be4:	43 9f       	mul	r20, r19
     be6:	90 0d       	add	r25, r0
     be8:	52 9f       	mul	r21, r18
     bea:	90 0d       	add	r25, r0
     bec:	11 24       	eor	r1, r1
     bee:	68 ec       	ldi	r22, 0xC8	; 200
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divmodhi4>
     bf6:	fb 01       	movw	r30, r22
     bf8:	70 93 20 01 	sts	0x0120, r23
     bfc:	60 93 1f 01 	sts	0x011F, r22

	// Minsoo
	RxInYaw = (RxInYaw * StickYawGain / 100);			// Stick Controll %
     c00:	20 91 40 01 	lds	r18, 0x0140
     c04:	30 91 41 01 	lds	r19, 0x0141
     c08:	80 91 2a 01 	lds	r24, 0x012A
     c0c:	90 91 2b 01 	lds	r25, 0x012B
     c10:	ac 01       	movw	r20, r24
     c12:	24 9f       	mul	r18, r20
     c14:	c0 01       	movw	r24, r0
     c16:	25 9f       	mul	r18, r21
     c18:	90 0d       	add	r25, r0
     c1a:	34 9f       	mul	r19, r20
     c1c:	90 0d       	add	r25, r0
     c1e:	11 24       	eor	r1, r1
     c20:	64 e6       	ldi	r22, 0x64	; 100
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divmodhi4>
     c28:	9b 01       	movw	r18, r22

	if (Config.YawGyroDirection == GYRO_NORMAL)	{		// scale gyro output
     c2a:	80 91 59 01 	lds	r24, 0x0159
     c2e:	88 23       	and	r24, r24
     c30:	39 f4       	brne	.+14     	; 0xc40 <loop+0x454>
		RxInYaw += gyroADC[YAW];
     c32:	e6 0f       	add	r30, r22
     c34:	f7 1f       	adc	r31, r23
     c36:	f0 93 2b 01 	sts	0x012B, r31
     c3a:	e0 93 2a 01 	sts	0x012A, r30
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <loop+0x460>
	} else {
		RxInYaw -= gyroADC[YAW];
     c40:	2e 1b       	sub	r18, r30
     c42:	3f 0b       	sbc	r19, r31
     c44:	30 93 2b 01 	sts	0x012B, r19
     c48:	20 93 2a 01 	sts	0x012A, r18
	}

	//--- (Add)Adjust yaw gyro output to motors
#ifdef QUAD_COPTER
	MotorOut1 -= RxInYaw;
     c4c:	80 91 2a 01 	lds	r24, 0x012A
     c50:	90 91 2b 01 	lds	r25, 0x012B
     c54:	98 01       	movw	r18, r16
     c56:	2c 0f       	add	r18, r28
     c58:	3d 1f       	adc	r19, r29
     c5a:	28 1b       	sub	r18, r24
     c5c:	39 0b       	sbc	r19, r25
     c5e:	30 93 22 01 	sts	0x0122, r19
     c62:	20 93 21 01 	sts	0x0121, r18
	MotorOut2 += RxInYaw;
     c66:	a7 01       	movw	r20, r14
     c68:	4c 0f       	add	r20, r28
     c6a:	5d 1f       	adc	r21, r29
     c6c:	48 0f       	add	r20, r24
     c6e:	59 1f       	adc	r21, r25
     c70:	50 93 2d 01 	sts	0x012D, r21
     c74:	40 93 2c 01 	sts	0x012C, r20
	MotorOut3 += RxInYaw;
     c78:	bc 01       	movw	r22, r24
     c7a:	6c 0f       	add	r22, r28
     c7c:	7d 1f       	adc	r23, r29
     c7e:	6e 19       	sub	r22, r14
     c80:	7f 09       	sbc	r23, r15
     c82:	70 93 3f 01 	sts	0x013F, r23
     c86:	60 93 3e 01 	sts	0x013E, r22
	MotorOut4 -= RxInYaw;
     c8a:	fe 01       	movw	r30, r28
     c8c:	e0 1b       	sub	r30, r16
     c8e:	f1 0b       	sbc	r31, r17
     c90:	e8 1b       	sub	r30, r24
     c92:	f9 0b       	sbc	r31, r25
     c94:	f0 93 33 01 	sts	0x0133, r31
     c98:	e0 93 32 01 	sts	0x0132, r30
#endif

#endif

	//--- Limit the lowest value to avoid stopping of motor if motor value is under-saturated ---
	if ( MotorOut1 < 10 )	MotorOut1 = 10;					// this is the motor idle level
     c9c:	2a 30       	cpi	r18, 0x0A	; 10
     c9e:	31 05       	cpc	r19, r1
     ca0:	34 f4       	brge	.+12     	; 0xcae <loop+0x4c2>
     ca2:	8a e0       	ldi	r24, 0x0A	; 10
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 22 01 	sts	0x0122, r25
     caa:	80 93 21 01 	sts	0x0121, r24
	if ( MotorOut2 < 10 )	MotorOut2 = 10;	
     cae:	4a 30       	cpi	r20, 0x0A	; 10
     cb0:	51 05       	cpc	r21, r1
     cb2:	34 f4       	brge	.+12     	; 0xcc0 <loop+0x4d4>
     cb4:	8a e0       	ldi	r24, 0x0A	; 10
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	90 93 2d 01 	sts	0x012D, r25
     cbc:	80 93 2c 01 	sts	0x012C, r24
	if ( MotorOut3 < 10 )	MotorOut3 = 10;
     cc0:	6a 30       	cpi	r22, 0x0A	; 10
     cc2:	71 05       	cpc	r23, r1
     cc4:	34 f4       	brge	.+12     	; 0xcd2 <loop+0x4e6>
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 3f 01 	sts	0x013F, r25
     cce:	80 93 3e 01 	sts	0x013E, r24
#ifndef TRI_COPTER
	if ( MotorOut4 < 10 )	MotorOut4 = 10;	
     cd2:	3a 97       	sbiw	r30, 0x0a	; 10
     cd4:	34 f4       	brge	.+12     	; 0xce2 <loop+0x4f6>
     cd6:	8a e0       	ldi	r24, 0x0A	; 10
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 33 01 	sts	0x0133, r25
     cde:	80 93 32 01 	sts	0x0132, r24
	if ( MotorOut5 < 10 )	MotorOut5 = 10;	
	if ( MotorOut6 < 10 )	MotorOut6 = 10;	
#endif	
	//--- Output to motor ESC's ---

	if (RxInCollective < 1 || !Armed || !GyroCalibrated)	// turn off motors if collective below 1% ???
     ce2:	1c 16       	cp	r1, r28
     ce4:	1d 06       	cpc	r1, r29
     ce6:	44 f4       	brge	.+16     	; 0xcf8 <loop+0x50c>
     ce8:	80 91 44 01 	lds	r24, 0x0144
     cec:	88 23       	and	r24, r24
     cee:	21 f0       	breq	.+8      	; 0xcf8 <loop+0x50c>
     cf0:	80 91 23 01 	lds	r24, 0x0123
     cf4:	88 23       	and	r24, r24
     cf6:	81 f4       	brne	.+32     	; 0xd18 <loop+0x52c>
	{														// or  if gyros not calibrated
		MotorOut1 = 0;
     cf8:	10 92 22 01 	sts	0x0122, r1
     cfc:	10 92 21 01 	sts	0x0121, r1
		MotorOut2 = 0;
     d00:	10 92 2d 01 	sts	0x012D, r1
     d04:	10 92 2c 01 	sts	0x012C, r1
		MotorOut3 = 0;
     d08:	10 92 3f 01 	sts	0x013F, r1
     d0c:	10 92 3e 01 	sts	0x013E, r1
#ifndef TRI_COPTER
		MotorOut4 = 0;
     d10:	10 92 33 01 	sts	0x0133, r1
     d14:	10 92 32 01 	sts	0x0132, r1
		MotorOut5 = 0;
		MotorOut6 = 0;
#endif
	}

	if (Armed) output_motor_ppm();		// output ESC signal
     d18:	80 91 44 01 	lds	r24, 0x0144
     d1c:	88 23       	and	r24, r24
     d1e:	11 f0       	breq	.+4      	; 0xd24 <loop+0x538>
     d20:	0e 94 c7 02 	call	0x58e	; 0x58e <output_motor_ppm>
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	08 95       	ret

00000d32 <eeprom_write_byte_changed>:
	M6 = 1;
#endif
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	16 2f       	mov	r17, r22
	if(eeprom_read_byte(addr) != value)
     d3c:	0e 94 bd 08 	call	0x117a	; 0x117a <__eerd_byte_m168>
     d40:	81 17       	cp	r24, r17
     d42:	21 f0       	breq	.+8      	; 0xd4c <eeprom_write_byte_changed+0x1a>
	{
		eeprom_write_byte( addr, value );
     d44:	ce 01       	movw	r24, r28
     d46:	61 2f       	mov	r22, r17
     d48:	0e 94 c5 08 	call	0x118a	; 0x118a <__eewr_byte_m168>
	}
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	08 95       	ret

00000d54 <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	8c 01       	movw	r16, r24
     d66:	6b 01       	movw	r12, r22
     d68:	7a 01       	movw	r14, r20
     d6a:	c0 e0       	ldi	r28, 0x00	; 0
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <eeprom_write_block_changes+0x2e>
	size_t len;

	for(len=0;len<size;len++)
	{
		eeprom_write_byte_changed( dest,  *src );
     d70:	c6 01       	movw	r24, r12
     d72:	8c 0f       	add	r24, r28
     d74:	9d 1f       	adc	r25, r29
     d76:	f8 01       	movw	r30, r16
     d78:	61 91       	ld	r22, Z+
     d7a:	8f 01       	movw	r16, r30
     d7c:	0e 94 99 06 	call	0xd32	; 0xd32 <eeprom_write_byte_changed>

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
	size_t len;

	for(len=0;len<size;len++)
     d80:	21 96       	adiw	r28, 0x01	; 1
     d82:	ce 15       	cp	r28, r14
     d84:	df 05       	cpc	r29, r15
     d86:	a0 f3       	brcs	.-24     	; 0xd70 <eeprom_write_block_changes+0x1c>
		eeprom_write_byte_changed( dest,  *src );

		src++;
		dest++;
	}
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// write to eeProm
	cli();
     d9a:	f8 94       	cli
	eeprom_write_block_changes( (const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	//current_config CONFIG_STRUCT
     d9c:	86 e5       	ldi	r24, 0x56	; 86
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	4c e0       	ldi	r20, 0x0C	; 12
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	0e 94 aa 06 	call	0xd54	; 0xd54 <eeprom_write_block_changes>
	sei();
     dac:	78 94       	sei
}
     dae:	08 95       	ret

00000db0 <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// load up last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!=0x47)
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 bd 08 	call	0x117a	; 0x117a <__eerd_byte_m168>
     db8:	87 34       	cpi	r24, 0x47	; 71
     dba:	41 f0       	breq	.+16     	; 0xdcc <Initial_EEPROM_Config_Load+0x1c>
	{
		Config.setup = 0x47;
     dbc:	87 e4       	ldi	r24, 0x47	; 71
     dbe:	80 93 56 01 	sts	0x0156, r24
		Set_EEPROM_Default_Config();
     dc2:	0e 94 bb 03 	call	0x776	; 0x776 <Set_EEPROM_Default_Config>
		// write to eeProm
		Save_Config_to_EEPROM();
     dc6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Save_Config_to_EEPROM>
     dca:	08 95       	ret
	} else {
		// read eeprom
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
     dcc:	86 e5       	ldi	r24, 0x56	; 86
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	4c e0       	ldi	r20, 0x0C	; 12
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_block_m168>
     ddc:	08 95       	ret

00000dde <setup>:
}

//----------------------------------------------

void setup(void)
{
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
	uint16_t i;	// nb was uint8_t, must be uint16_t for TRI
	uint16_t RxChannel1ZeroOffset, RxChannel2ZeroOffset, RxChannel4ZeroOffset;

	MCUCR |= (1<<PUD);	// Pull-up Disable
     dee:	85 b7       	in	r24, 0x35	; 53
     df0:	80 61       	ori	r24, 0x10	; 16
     df2:	85 bf       	out	0x35, r24	; 53

	RX_ROLL_DIR 		= INPUT;
     df4:	51 98       	cbi	0x0a, 1	; 10
	RX_PITCH_DIR 		= INPUT;
     df6:	52 98       	cbi	0x0a, 2	; 10
	RX_COLL_DIR   		= INPUT;
     df8:	53 98       	cbi	0x0a, 3	; 10
	RX_YAW_DIR   	 	= INPUT;
     dfa:	27 98       	cbi	0x04, 7	; 4

	GYRO_YAW_DIR 	 	= INPUT;
     dfc:	38 98       	cbi	0x07, 0	; 7
	GYRO_PITCH_DIR 	 	= INPUT;
     dfe:	39 98       	cbi	0x07, 1	; 7
	GYRO_ROLL_DIR  		= INPUT;
     e00:	3a 98       	cbi	0x07, 2	; 7
	GAIN_YAW_DIR 	 	= INPUT;
     e02:	3d 98       	cbi	0x07, 5	; 7
	GAIN_PITCH_DIR		= INPUT;
     e04:	3c 98       	cbi	0x07, 4	; 7
	GAIN_ROLL_DIR  		= INPUT;
     e06:	3b 98       	cbi	0x07, 3	; 7

	M1_DIR 				= OUTPUT;
     e08:	22 9a       	sbi	0x04, 2	; 4
	M2_DIR 				= OUTPUT;
     e0a:	21 9a       	sbi	0x04, 1	; 4
	M3_DIR 			 	= OUTPUT;
     e0c:	20 9a       	sbi	0x04, 0	; 4
	M4_DIR 			 	= OUTPUT;
     e0e:	57 9a       	sbi	0x0a, 7	; 10
#if defined(HEX_COPTER) || defined(Y6_COPTER)
	M5_DIR 				= OUTPUT;
	M6_DIR 				= OUTPUT;
#endif
	LED_DIR 			= OUTPUT;
     e10:	26 9a       	sbi	0x04, 6	; 4

	LED			= 0;
     e12:	2e 98       	cbi	0x05, 6	; 5
	RX_ROLL 	= 0;
     e14:	49 98       	cbi	0x09, 1	; 9
	RX_PITCH 	= 0;
     e16:	4a 98       	cbi	0x09, 2	; 9
	RX_COLL  	= 0;
     e18:	4b 98       	cbi	0x09, 3	; 9
	RX_YAW   	= 0;
     e1a:	1f 98       	cbi	0x03, 7	; 3

	// pin change interrupt enables
	PCICR |= (1 << PCIE0);			// PCINT0..7		
     e1c:	80 91 68 00 	lds	r24, 0x0068
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	80 93 68 00 	sts	0x0068, r24
	PCICR |= (1 << PCIE2);			// PCINT16..23
     e26:	80 91 68 00 	lds	r24, 0x0068
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	80 93 68 00 	sts	0x0068, r24

	// pin change masks
	PCMSK0 |= (1 << PCINT7);		// PB7
     e30:	80 91 6b 00 	lds	r24, 0x006B
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 93 6b 00 	sts	0x006B, r24
	PCMSK2 |= (1 << PCINT17);		// PD1
     e3a:	80 91 6d 00 	lds	r24, 0x006D
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	80 93 6d 00 	sts	0x006D, r24
	// external interrupts
	EICRA  = (1 << ISC00) | (1 << ISC10);	// Any change INT0, INT1
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	80 93 69 00 	sts	0x0069, r24
	EIMSK  = (1 << INT0) | (1 << INT1);		// External Interrupt Mask Register
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (1 << INTF0) | (1 << INTF1);
     e4e:	8c b3       	in	r24, 0x1c	; 28
     e50:	83 60       	ori	r24, 0x03	; 3
     e52:	8c bb       	out	0x1c, r24	; 28

	// timer0 (8bit) - run @ 8MHz
	// used to control ESC/servo pulse length
	TCCR0A = 0;						// normal operation
     e54:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00);			// clk/0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0; 					// no interrupts
     e5a:	10 92 6e 00 	sts	0x006E, r1

	// timer1 (16bit) - run @ 1Mhz
	// used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
     e5e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11);
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	80 93 81 00 	sts	0x0081, r24

	// timer2 8bit - run @ 8MHz / 1024 = 7812.5KHz
	// and Stick-Arming
	TCCR2A = 0;	
     e68:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);	// /1024
     e6c:	87 e0       	ldi	r24, 0x07	; 7
     e6e:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
     e72:	10 92 70 00 	sts	0x0070, r1
	TIFR2  = 0;
     e76:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;		// reset counter
     e78:	10 92 b2 00 	sts	0x00B2, r1
	} while (i>50);

	LowpassOutYaw = 0;								// Minsoo
#endif

	Initial_EEPROM_Config_Load();					// loads config at start-up 
     e7c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Initial_EEPROM_Config_Load>

//----------------------------------------------

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     e80:	8f e3       	ldi	r24, 0x3F	; 63
     e82:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     e86:	10 92 7b 00 	sts	0x007B, r1

	Initial_EEPROM_Config_Load();					// loads config at start-up 

	Init_ADC();

	GyroCalibrated = false;
     e8a:	10 92 23 01 	sts	0x0123, r1
	Armed = false;
     e8e:	10 92 44 01 	sts	0x0144, r1
	RxChannelsUpdatingFlag = 0;
     e92:	10 92 51 01 	sts	0x0151, r1

	RxChannel1 = Config.RxChannel1ZeroOffset;		// prime the channels 1520;
     e96:	80 91 5a 01 	lds	r24, 0x015A
     e9a:	90 91 5b 01 	lds	r25, 0x015B
     e9e:	90 93 53 01 	sts	0x0153, r25
     ea2:	80 93 52 01 	sts	0x0152, r24
	RxChannel2 = Config.RxChannel2ZeroOffset;		// 1520;
     ea6:	80 91 5c 01 	lds	r24, 0x015C
     eaa:	90 91 5d 01 	lds	r25, 0x015D
     eae:	90 93 3b 01 	sts	0x013B, r25
     eb2:	80 93 3a 01 	sts	0x013A, r24
	RxChannel3 = Config.RxChannel3ZeroOffset;		// 1120;
     eb6:	80 91 5e 01 	lds	r24, 0x015E
     eba:	90 91 5f 01 	lds	r25, 0x015F
     ebe:	90 93 50 01 	sts	0x0150, r25
     ec2:	80 93 4f 01 	sts	0x014F, r24
	RxChannel4 = Config.RxChannel4ZeroOffset;		// 1520;
     ec6:	80 91 60 01 	lds	r24, 0x0160
     eca:	90 91 61 01 	lds	r25, 0x0161
     ece:	90 93 27 01 	sts	0x0127, r25
     ed2:	80 93 26 01 	sts	0x0126, r24

	// flash LED
	LED = 1;
     ed6:	2e 9a       	sbi	0x05, 6	; 5
	delay_ms(150);
     ed8:	86 e9       	ldi	r24, 0x96	; 150
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
	LED = 0;
     ee0:	2e 98       	cbi	0x05, 6	; 5

	sei();											// Global Interrupts 
     ee2:	78 94       	sei

	// 2 second delay
	delay_ms(1500);
     ee4:	8c ed       	ldi	r24, 0xDC	; 220
     ee6:	95 e0       	ldi	r25, 0x05	; 5
     ee8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
	
	ReadGainPots();
     eec:	0e 94 19 01 	call	0x232	; 0x232 <ReadGainPots>
	ReadGainPots();
     ef0:	0e 94 19 01 	call	0x232	; 0x232 <ReadGainPots>

	// clear config
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100 && 
     ef4:	80 91 49 01 	lds	r24, 0x0149
     ef8:	90 91 4a 01 	lds	r25, 0x014A
     efc:	c3 97       	sbiw	r24, 0x33	; 51
     efe:	08 f0       	brcs	.+2      	; 0xf02 <setup+0x124>
     f00:	6d c0       	rjmp	.+218    	; 0xfdc <setup+0x1fe>
     f02:	80 91 47 01 	lds	r24, 0x0147
     f06:	90 91 48 01 	lds	r25, 0x0148
     f0a:	c3 97       	sbiw	r24, 0x33	; 51
     f0c:	48 f4       	brcc	.+18     	; 0xf20 <setup+0x142>
     f0e:	80 91 4b 01 	lds	r24, 0x014B
     f12:	90 91 4c 01 	lds	r25, 0x014C
     f16:	c3 97       	sbiw	r24, 0x33	; 51
     f18:	18 f4       	brcc	.+6      	; 0xf20 <setup+0x142>
        GainInADC[ROLL]  < (UC_ADC_MAX*5)/100 && 
        GainInADC[YAW]   < (UC_ADC_MAX*5)/100 )
	{
		Set_EEPROM_Default_Config();
     f1a:	0e 94 bb 03 	call	0x776	; 0x776 <Set_EEPROM_Default_Config>
     f1e:	ff cf       	rjmp	.-2      	; 0xf1e <setup+0x140>

	// Stick Centering
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
	    // set offsets to zero (otherwise we affect what we want to calibrate !!)
	    Config.RxChannel1ZeroOffset  = 0;
     f20:	10 92 5b 01 	sts	0x015B, r1
     f24:	10 92 5a 01 	sts	0x015A, r1
	    Config.RxChannel2ZeroOffset  = 0;
     f28:	10 92 5d 01 	sts	0x015D, r1
     f2c:	10 92 5c 01 	sts	0x015C, r1
	    Config.RxChannel4ZeroOffset  = 0;
     f30:	10 92 61 01 	sts	0x0161, r1
     f34:	10 92 60 01 	sts	0x0160, r1
     f38:	c0 e0       	ldi	r28, 0x00	; 0
     f3a:	d0 e0       	ldi	r29, 0x00	; 0

		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     f3c:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     f3e:	89 e1       	ldi	r24, 0x19	; 25
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
			LED = 0;
     f46:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     f48:	89 e1       	ldi	r24, 0x19	; 25
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
	    Config.RxChannel1ZeroOffset  = 0;
	    Config.RxChannel2ZeroOffset  = 0;
	    Config.RxChannel4ZeroOffset  = 0;

		// flash LED 3 times
		for (i=0;i<3;i++)
     f50:	21 96       	adiw	r28, 0x01	; 1
     f52:	c3 30       	cpi	r28, 0x03	; 3
     f54:	d1 05       	cpc	r29, r1
     f56:	91 f7       	brne	.-28     	; 0xf3c <setup+0x15e>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}
		// 5 Seconds Delay, for binding (Minsoo)
		delay_ms(3750);
     f58:	86 ea       	ldi	r24, 0xA6	; 166
     f5a:	9e e0       	ldi	r25, 0x0E	; 14
     f5c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
     f60:	ee 24       	eor	r14, r14
     f62:	ff 24       	eor	r15, r15
     f64:	cc 24       	eor	r12, r12
     f66:	dd 24       	eor	r13, r13
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
		{
	 		RxGetChannels();
     f70:	0e 94 69 02 	call	0x4d2	; 0x4d2 <RxGetChannels>

		    RxChannel1ZeroOffset += RxInRoll;
     f74:	80 91 28 01 	lds	r24, 0x0128
     f78:	90 91 29 01 	lds	r25, 0x0129
     f7c:	08 0f       	add	r16, r24
     f7e:	19 1f       	adc	r17, r25
		    RxChannel2ZeroOffset += RxInPitch;
     f80:	80 91 42 01 	lds	r24, 0x0142
     f84:	90 91 43 01 	lds	r25, 0x0143
     f88:	e8 0e       	add	r14, r24
     f8a:	f9 1e       	adc	r15, r25
		    RxChannel4ZeroOffset += RxInYaw;
     f8c:	80 91 2a 01 	lds	r24, 0x012A
     f90:	90 91 2b 01 	lds	r25, 0x012B
     f94:	c8 0e       	add	r12, r24
     f96:	d9 1e       	adc	r13, r25

			delay_ms(100);
     f98:	84 e6       	ldi	r24, 0x64	; 100
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
		// 5 Seconds Delay, for binding (Minsoo)
		delay_ms(3750);

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
     fa0:	21 96       	adiw	r28, 0x01	; 1
     fa2:	c4 30       	cpi	r28, 0x04	; 4
     fa4:	d1 05       	cpc	r29, r1
     fa6:	21 f7       	brne	.-56     	; 0xf70 <setup+0x192>
		    RxChannel4ZeroOffset += RxInYaw;

			delay_ms(100);
		}
		// nb RxGetChannels() divides RxInXXX by 4 so we won't here
	    Config.RxChannel1ZeroOffset  = RxChannel1ZeroOffset;
     fa8:	10 93 5b 01 	sts	0x015B, r17
     fac:	00 93 5a 01 	sts	0x015A, r16
	    Config.RxChannel2ZeroOffset  = RxChannel2ZeroOffset;
     fb0:	f0 92 5d 01 	sts	0x015D, r15
     fb4:	e0 92 5c 01 	sts	0x015C, r14
	    Config.RxChannel3ZeroOffset  = 1120;
     fb8:	80 e6       	ldi	r24, 0x60	; 96
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	90 93 5f 01 	sts	0x015F, r25
     fc0:	80 93 5e 01 	sts	0x015E, r24
	    Config.RxChannel4ZeroOffset  = RxChannel4ZeroOffset;
     fc4:	d0 92 61 01 	sts	0x0161, r13
     fc8:	c0 92 60 01 	sts	0x0160, r12

		// Store gyro direction to EEPROM
		Save_Config_to_EEPROM();
     fcc:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Save_Config_to_EEPROM>

		// flash LED, Ending Sign (Minsoo)
		LED = 1;
     fd0:	2e 9a       	sbi	0x05, 6	; 5
		delay_ms(150);
     fd2:	86 e9       	ldi	r24, 0x96	; 150
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
		LED = 0;
     fda:	2e 98       	cbi	0x05, 6	; 5
	}


	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
     fdc:	80 91 47 01 	lds	r24, 0x0147
     fe0:	90 91 48 01 	lds	r25, 0x0148
     fe4:	c3 97       	sbiw	r24, 0x33	; 51
     fe6:	08 f0       	brcs	.+2      	; 0xfea <setup+0x20c>
     fe8:	4b c0       	rjmp	.+150    	; 0x1080 <setup+0x2a2>
     fea:	c0 e0       	ldi	r28, 0x00	; 0
     fec:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     fee:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     ff0:	89 e1       	ldi	r24, 0x19	; 25
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
			LED = 0;
     ff8:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     ffa:	89 e1       	ldi	r24, 0x19	; 25
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>

	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
    1002:	21 96       	adiw	r28, 0x01	; 1
    1004:	c3 30       	cpi	r28, 0x03	; 3
    1006:	d1 05       	cpc	r29, r1
    1008:	91 f7       	brne	.-28     	; 0xfee <setup+0x210>
			} else if (RxInPitch < -30) { // normal(up)
				Config.PitchGyroDirection = GYRO_NORMAL;
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch > 30) { // reverse(down)
				Config.PitchGyroDirection = GYRO_REVERSED;
    100a:	11 e0       	ldi	r17, 0x01	; 1
			delay_ms(25);
		}

		while(1)
		{
			RxGetChannels();
    100c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <RxGetChannels>


			if (RxInYaw < -30) { // normal(left)
    1010:	80 91 2a 01 	lds	r24, 0x012A
    1014:	90 91 2b 01 	lds	r25, 0x012B
    1018:	2f ef       	ldi	r18, 0xFF	; 255
    101a:	82 3e       	cpi	r24, 0xE2	; 226
    101c:	92 07       	cpc	r25, r18
    101e:	1c f4       	brge	.+6      	; 0x1026 <setup+0x248>
				Config.YawGyroDirection = GYRO_NORMAL;
    1020:	10 92 59 01 	sts	0x0159, r1
    1024:	24 c0       	rjmp	.+72     	; 0x106e <setup+0x290>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
    1026:	4f 97       	sbiw	r24, 0x1f	; 31
    1028:	1c f0       	brlt	.+6      	; 0x1030 <setup+0x252>
				Config.YawGyroDirection = GYRO_REVERSED;
    102a:	10 93 59 01 	sts	0x0159, r17
    102e:	1f c0       	rjmp	.+62     	; 0x106e <setup+0x290>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInRoll < -30) {	// normal(left)
    1030:	80 91 28 01 	lds	r24, 0x0128
    1034:	90 91 29 01 	lds	r25, 0x0129
    1038:	2f ef       	ldi	r18, 0xFF	; 255
    103a:	82 3e       	cpi	r24, 0xE2	; 226
    103c:	92 07       	cpc	r25, r18
    103e:	1c f4       	brge	.+6      	; 0x1046 <setup+0x268>
				Config.RollGyroDirection = GYRO_NORMAL;
    1040:	10 92 57 01 	sts	0x0157, r1
    1044:	14 c0       	rjmp	.+40     	; 0x106e <setup+0x290>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInRoll > 30) {	// reverse(right)
    1046:	4f 97       	sbiw	r24, 0x1f	; 31
    1048:	1c f0       	brlt	.+6      	; 0x1050 <setup+0x272>
				Config.RollGyroDirection = GYRO_REVERSED;
    104a:	10 93 57 01 	sts	0x0157, r17
    104e:	0f c0       	rjmp	.+30     	; 0x106e <setup+0x290>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch < -30) { // normal(up)
    1050:	80 91 42 01 	lds	r24, 0x0142
    1054:	90 91 43 01 	lds	r25, 0x0143
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	82 3e       	cpi	r24, 0xE2	; 226
    105c:	92 07       	cpc	r25, r18
    105e:	1c f4       	brge	.+6      	; 0x1066 <setup+0x288>
				Config.PitchGyroDirection = GYRO_NORMAL;
    1060:	10 92 58 01 	sts	0x0158, r1
    1064:	04 c0       	rjmp	.+8      	; 0x106e <setup+0x290>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch > 30) { // reverse(down)
    1066:	4f 97       	sbiw	r24, 0x1f	; 31
    1068:	2c f0       	brlt	.+10     	; 0x1074 <setup+0x296>
				Config.PitchGyroDirection = GYRO_REVERSED;
    106a:	10 93 58 01 	sts	0x0158, r17
				Save_Config_to_EEPROM();
    106e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Save_Config_to_EEPROM>
				LED = 1;
    1072:	2e 9a       	sbi	0x05, 6	; 5
				Config.YawGyroDirection = GYRO_REVERSED;
				Save_Config_to_EEPROM();
				LED = 1;
			}
	
			delay_ms(50);
    1074:	82 e3       	ldi	r24, 0x32	; 50
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
			LED = 0;
    107c:	2e 98       	cbi	0x05, 6	; 5
    107e:	c6 cf       	rjmp	.-116    	; 0x100c <setup+0x22e>

		}
	}

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
    1080:	80 91 4b 01 	lds	r24, 0x014B
    1084:	90 91 4c 01 	lds	r25, 0x014C
    1088:	c3 97       	sbiw	r24, 0x33	; 51
    108a:	90 f5       	brcc	.+100    	; 0x10f0 <setup+0x312>
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
    1090:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
    1092:	89 e1       	ldi	r24, 0x19	; 25
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>
			LED = 0;
    109a:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
    109c:	89 e1       	ldi	r24, 0x19	; 25
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <delay_ms>

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
    10a4:	21 96       	adiw	r28, 0x01	; 1
    10a6:	c3 30       	cpi	r28, 0x03	; 3
    10a8:	d1 05       	cpc	r29, r1
    10aa:	91 f7       	brne	.-28     	; 0x1090 <setup+0x2b2>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}

		Armed = true;	// override so that output_motor_pwm() won't quit early
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 44 01 	sts	0x0144, r24
		PWM_Low_Pulse_Interval = ((1000000UL / 50) - 2000)/10;	// set to 50Hz
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	97 e0       	ldi	r25, 0x07	; 7
    10b6:	90 93 01 01 	sts	0x0101, r25
    10ba:	80 93 00 01 	sts	0x0100, r24
		ServoPPMRateDivider = 1;	// since we have already set to 50Hz
#endif
		
		while (1)	// loop forever
		{
			RxGetChannels();
    10be:	0e 94 69 02 	call	0x4d2	; 0x4d2 <RxGetChannels>

			MotorOut1 = RxInCollective;
    10c2:	80 91 19 01 	lds	r24, 0x0119
    10c6:	90 91 1a 01 	lds	r25, 0x011A
    10ca:	90 93 22 01 	sts	0x0122, r25
    10ce:	80 93 21 01 	sts	0x0121, r24
			MotorOut2 = RxInCollective;
    10d2:	90 93 2d 01 	sts	0x012D, r25
    10d6:	80 93 2c 01 	sts	0x012C, r24
			MotorOut3 = RxInCollective;
    10da:	90 93 3f 01 	sts	0x013F, r25
    10de:	80 93 3e 01 	sts	0x013E, r24
#ifdef TRI_COPTER
			MotorOut4 = RxInYaw;
#else
			MotorOut4 = RxInCollective;
    10e2:	90 93 33 01 	sts	0x0133, r25
    10e6:	80 93 32 01 	sts	0x0132, r24
#endif
#if defined(HEX_COPTER) || defined(Y6_COPTER)
			MotorOut5 = RxInCollective;
			MotorOut6 = RxInCollective;
#endif
			output_motor_ppm();	// this regulates rate at which we output signals
    10ea:	0e 94 c7 02 	call	0x58e	; 0x58e <output_motor_ppm>
    10ee:	e7 cf       	rjmp	.-50     	; 0x10be <setup+0x2e0>
		}
	}
}
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	08 95       	ret

00001102 <main>:
//----------------------------------------------

int main(void)
{

	setup();
    1102:	0e 94 ef 06 	call	0xdde	; 0xdde <setup>

	while (1)
	{
		loop();
    1106:	0e 94 f6 03 	call	0x7ec	; 0x7ec <loop>
    110a:	fd cf       	rjmp	.-6      	; 0x1106 <main+0x4>

0000110c <__udivmodhi4>:
    110c:	aa 1b       	sub	r26, r26
    110e:	bb 1b       	sub	r27, r27
    1110:	51 e1       	ldi	r21, 0x11	; 17
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <__udivmodhi4_ep>

00001114 <__udivmodhi4_loop>:
    1114:	aa 1f       	adc	r26, r26
    1116:	bb 1f       	adc	r27, r27
    1118:	a6 17       	cp	r26, r22
    111a:	b7 07       	cpc	r27, r23
    111c:	10 f0       	brcs	.+4      	; 0x1122 <__udivmodhi4_ep>
    111e:	a6 1b       	sub	r26, r22
    1120:	b7 0b       	sbc	r27, r23

00001122 <__udivmodhi4_ep>:
    1122:	88 1f       	adc	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	5a 95       	dec	r21
    1128:	a9 f7       	brne	.-22     	; 0x1114 <__udivmodhi4_loop>
    112a:	80 95       	com	r24
    112c:	90 95       	com	r25
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	08 95       	ret

00001134 <__divmodhi4>:
    1134:	97 fb       	bst	r25, 7
    1136:	09 2e       	mov	r0, r25
    1138:	07 26       	eor	r0, r23
    113a:	0a d0       	rcall	.+20     	; 0x1150 <__divmodhi4_neg1>
    113c:	77 fd       	sbrc	r23, 7
    113e:	04 d0       	rcall	.+8      	; 0x1148 <__divmodhi4_neg2>
    1140:	e5 df       	rcall	.-54     	; 0x110c <__udivmodhi4>
    1142:	06 d0       	rcall	.+12     	; 0x1150 <__divmodhi4_neg1>
    1144:	00 20       	and	r0, r0
    1146:	1a f4       	brpl	.+6      	; 0x114e <__divmodhi4_exit>

00001148 <__divmodhi4_neg2>:
    1148:	70 95       	com	r23
    114a:	61 95       	neg	r22
    114c:	7f 4f       	sbci	r23, 0xFF	; 255

0000114e <__divmodhi4_exit>:
    114e:	08 95       	ret

00001150 <__divmodhi4_neg1>:
    1150:	f6 f7       	brtc	.-4      	; 0x114e <__divmodhi4_exit>
    1152:	90 95       	com	r25
    1154:	81 95       	neg	r24
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	08 95       	ret

0000115a <__eerd_block_m168>:
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22

0000115e <__eerd_blraw_m168>:
    115e:	fc 01       	movw	r30, r24
    1160:	f9 99       	sbic	0x1f, 1	; 31
    1162:	fe cf       	rjmp	.-4      	; 0x1160 <__eerd_blraw_m168+0x2>
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <__eerd_blraw_m168+0x14>
    1166:	f2 bd       	out	0x22, r31	; 34
    1168:	e1 bd       	out	0x21, r30	; 33
    116a:	f8 9a       	sbi	0x1f, 0	; 31
    116c:	31 96       	adiw	r30, 0x01	; 1
    116e:	00 b4       	in	r0, 0x20	; 32
    1170:	0d 92       	st	X+, r0
    1172:	41 50       	subi	r20, 0x01	; 1
    1174:	50 40       	sbci	r21, 0x00	; 0
    1176:	b8 f7       	brcc	.-18     	; 0x1166 <__eerd_blraw_m168+0x8>
    1178:	08 95       	ret

0000117a <__eerd_byte_m168>:
    117a:	f9 99       	sbic	0x1f, 1	; 31
    117c:	fe cf       	rjmp	.-4      	; 0x117a <__eerd_byte_m168>
    117e:	92 bd       	out	0x22, r25	; 34
    1180:	81 bd       	out	0x21, r24	; 33
    1182:	f8 9a       	sbi	0x1f, 0	; 31
    1184:	99 27       	eor	r25, r25
    1186:	80 b5       	in	r24, 0x20	; 32
    1188:	08 95       	ret

0000118a <__eewr_byte_m168>:
    118a:	26 2f       	mov	r18, r22

0000118c <__eewr_r18_m168>:
    118c:	f9 99       	sbic	0x1f, 1	; 31
    118e:	fe cf       	rjmp	.-4      	; 0x118c <__eewr_r18_m168>
    1190:	1f ba       	out	0x1f, r1	; 31
    1192:	92 bd       	out	0x22, r25	; 34
    1194:	81 bd       	out	0x21, r24	; 33
    1196:	20 bd       	out	0x20, r18	; 32
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	fa 9a       	sbi	0x1f, 2	; 31
    119e:	f9 9a       	sbi	0x1f, 1	; 31
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	08 95       	ret

000011a6 <_exit>:
    11a6:	f8 94       	cli

000011a8 <__stop_program>:
    11a8:	ff cf       	rjmp	.-2      	; 0x11a8 <__stop_program>
