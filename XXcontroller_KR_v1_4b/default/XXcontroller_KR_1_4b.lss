
XXcontroller_KR_1_4b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000116e  00001202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000116e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800102  00800102  00001204  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000037a  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f3  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000229  00000000  00000000  00001e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e4a  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f5  00000000  00000000  0000355e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1a 00 	jmp	0x34	; 0x34 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_2>
       c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_3>
      10:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      14:	0c 94 39 00 	jmp	0x72	; 0x72 <__vector_5>
      18:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      1c:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      20:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      24:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      28:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      2c:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>
      30:	0c 94 37 00 	jmp	0x6e	; 0x6e <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	ee e6       	ldi	r30, 0x6E	; 110
      48:	f1 e1       	ldi	r31, 0x11	; 17
      4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
      50:	a2 30       	cpi	r26, 0x02	; 2
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
      56:	11 e0       	ldi	r17, 0x01	; 1
      58:	a2 e0       	ldi	r26, 0x02	; 2
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a2 36       	cpi	r26, 0x62	; 98
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	0e 94 63 08 	call	0x10c6	; 0x10c6 <main>
      6a:	0c 94 b5 08 	jmp	0x116a	; 0x116a <_exit>

0000006e <__bad_interrupt>:
      6e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000072 <__vector_5>:
void delay_ms(uint16_t time);


// RX_ROLL
ISR(PCINT2_vect)
{
      72:	1f 92       	push	r1
      74:	0f 92       	push	r0
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	0f 92       	push	r0
      7a:	11 24       	eor	r1, r1
      7c:	2f 93       	push	r18
      7e:	3f 93       	push	r19
      80:	8f 93       	push	r24
      82:	9f 93       	push	r25
	if ( RX_ROLL )			// rising
      84:	49 9b       	sbis	0x09, 1	; 9
      86:	09 c0       	rjmp	.+18     	; 0x9a <__vector_5+0x28>
	{
		RxChannel1Start = TCNT1;
      88:	80 91 84 00 	lds	r24, 0x0084
      8c:	90 91 85 00 	lds	r25, 0x0085
      90:	90 93 46 01 	sts	0x0146, r25
      94:	80 93 45 01 	sts	0x0145, r24
      98:	13 c0       	rjmp	.+38     	; 0xc0 <__vector_5+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 51 01 	sts	0x0151, r24
		RxChannel1 = TCNT1 - RxChannel1Start;
      a0:	80 91 84 00 	lds	r24, 0x0084
      a4:	90 91 85 00 	lds	r25, 0x0085
      a8:	20 91 45 01 	lds	r18, 0x0145
      ac:	30 91 46 01 	lds	r19, 0x0146
      b0:	82 1b       	sub	r24, r18
      b2:	93 0b       	sbc	r25, r19
      b4:	90 93 53 01 	sts	0x0153, r25
      b8:	80 93 52 01 	sts	0x0152, r24
		RxChannelsUpdatingFlag = 0;
      bc:	10 92 51 01 	sts	0x0151, r1
	}
}
      c0:	9f 91       	pop	r25
      c2:	8f 91       	pop	r24
      c4:	3f 91       	pop	r19
      c6:	2f 91       	pop	r18
      c8:	0f 90       	pop	r0
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	0f 90       	pop	r0
      ce:	1f 90       	pop	r1
      d0:	18 95       	reti

000000d2 <__vector_1>:

// RX_PITCH
ISR(INT0_vect)
{
      d2:	1f 92       	push	r1
      d4:	0f 92       	push	r0
      d6:	0f b6       	in	r0, 0x3f	; 63
      d8:	0f 92       	push	r0
      da:	11 24       	eor	r1, r1
      dc:	2f 93       	push	r18
      de:	3f 93       	push	r19
      e0:	8f 93       	push	r24
      e2:	9f 93       	push	r25
	if (RX_PITCH)		
      e4:	4a 9b       	sbis	0x09, 2	; 9
      e6:	09 c0       	rjmp	.+18     	; 0xfa <__vector_1+0x28>
	{
		RxChannel2Start = TCNT1;
      e8:	80 91 84 00 	lds	r24, 0x0084
      ec:	90 91 85 00 	lds	r25, 0x0085
      f0:	90 93 25 01 	sts	0x0125, r25
      f4:	80 93 24 01 	sts	0x0124, r24
      f8:	13 c0       	rjmp	.+38     	; 0x120 <__vector_1+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 51 01 	sts	0x0151, r24
		RxChannel2 = TCNT1 - RxChannel2Start;
     100:	80 91 84 00 	lds	r24, 0x0084
     104:	90 91 85 00 	lds	r25, 0x0085
     108:	20 91 24 01 	lds	r18, 0x0124
     10c:	30 91 25 01 	lds	r19, 0x0125
     110:	82 1b       	sub	r24, r18
     112:	93 0b       	sbc	r25, r19
     114:	90 93 3b 01 	sts	0x013B, r25
     118:	80 93 3a 01 	sts	0x013A, r24
		RxChannelsUpdatingFlag = 0;
     11c:	10 92 51 01 	sts	0x0151, r1
	}
}
     120:	9f 91       	pop	r25
     122:	8f 91       	pop	r24
     124:	3f 91       	pop	r19
     126:	2f 91       	pop	r18
     128:	0f 90       	pop	r0
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	0f 90       	pop	r0
     12e:	1f 90       	pop	r1
     130:	18 95       	reti

00000132 <__vector_2>:

// RX_COLL
ISR(INT1_vect)
{
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
	if (RX_COLL)		
     144:	4b 9b       	sbis	0x09, 3	; 9
     146:	09 c0       	rjmp	.+18     	; 0x15a <__vector_2+0x28>
	{
		RxChannel3Start = TCNT1;
     148:	80 91 84 00 	lds	r24, 0x0084
     14c:	90 91 85 00 	lds	r25, 0x0085
     150:	90 93 31 01 	sts	0x0131, r25
     154:	80 93 30 01 	sts	0x0130, r24
     158:	13 c0       	rjmp	.+38     	; 0x180 <__vector_2+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	80 93 51 01 	sts	0x0151, r24
		RxChannel3 = TCNT1 - RxChannel3Start;
     160:	80 91 84 00 	lds	r24, 0x0084
     164:	90 91 85 00 	lds	r25, 0x0085
     168:	20 91 30 01 	lds	r18, 0x0130
     16c:	30 91 31 01 	lds	r19, 0x0131
     170:	82 1b       	sub	r24, r18
     172:	93 0b       	sbc	r25, r19
     174:	90 93 50 01 	sts	0x0150, r25
     178:	80 93 4f 01 	sts	0x014F, r24
		RxChannelsUpdatingFlag = 0;
     17c:	10 92 51 01 	sts	0x0151, r1
	}
}
     180:	9f 91       	pop	r25
     182:	8f 91       	pop	r24
     184:	3f 91       	pop	r19
     186:	2f 91       	pop	r18
     188:	0f 90       	pop	r0
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	0f 90       	pop	r0
     18e:	1f 90       	pop	r1
     190:	18 95       	reti

00000192 <__vector_3>:

// RX_YAW
ISR(PCINT0_vect)
{
     192:	1f 92       	push	r1
     194:	0f 92       	push	r0
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	0f 92       	push	r0
     19a:	11 24       	eor	r1, r1
     19c:	2f 93       	push	r18
     19e:	3f 93       	push	r19
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
	if ( RX_YAW )			// rising
     1a4:	1f 9b       	sbis	0x03, 7	; 3
     1a6:	09 c0       	rjmp	.+18     	; 0x1ba <__vector_3+0x28>
	{
		RxChannel4Start = TCNT1;
     1a8:	80 91 84 00 	lds	r24, 0x0084
     1ac:	90 91 85 00 	lds	r25, 0x0085
     1b0:	90 93 4e 01 	sts	0x014E, r25
     1b4:	80 93 4d 01 	sts	0x014D, r24
     1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <__vector_3+0x4e>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 51 01 	sts	0x0151, r24
		RxChannel4 = TCNT1 - RxChannel4Start;
     1c0:	80 91 84 00 	lds	r24, 0x0084
     1c4:	90 91 85 00 	lds	r25, 0x0085
     1c8:	20 91 4d 01 	lds	r18, 0x014D
     1cc:	30 91 4e 01 	lds	r19, 0x014E
     1d0:	82 1b       	sub	r24, r18
     1d2:	93 0b       	sbc	r25, r19
     1d4:	90 93 27 01 	sts	0x0127, r25
     1d8:	80 93 26 01 	sts	0x0126, r24
		RxChannelsUpdatingFlag = 0;
     1dc:	10 92 51 01 	sts	0x0151, r1
	}
}
     1e0:	9f 91       	pop	r25
     1e2:	8f 91       	pop	r24
     1e4:	3f 91       	pop	r19
     1e6:	2f 91       	pop	r18
     1e8:	0f 90       	pop	r0
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	0f 90       	pop	r0
     1ee:	1f 90       	pop	r1
     1f0:	18 95       	reti

000001f2 <Init_ADC>:
	if (Armed) output_motor_ppm();		// output ESC signal
}

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     1f2:	8f e3       	ldi	r24, 0x3F	; 63
     1f4:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     1f8:	10 92 7b 00 	sts	0x007B, r1
}
     1fc:	08 95       	ret

000001fe <ReadGainPots>:
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     204:	86 ec       	ldi	r24, 0xC6	; 198
     206:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     20a:	80 91 7a 00 	lds	r24, 0x007A
     20e:	86 fd       	sbrc	r24, 6
     210:	fc cf       	rjmp	.-8      	; 0x20a <ReadGainPots+0xc>
}

void ReadGainPots(void)
{
	read_adc( 3 );			// read roll gain ADC3
	GainInADC[ROLL] = ADCL;
     212:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[ROLL] += ((uint16_t) ADCH <<8);
     216:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[ROLL] = 1024 - GainInADC[ROLL];
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	94 e0       	ldi	r25, 0x04	; 4
     21e:	82 1b       	sub	r24, r18
     220:	91 09       	sbc	r25, r1
     222:	34 2f       	mov	r19, r20
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	82 1b       	sub	r24, r18
     228:	93 0b       	sbc	r25, r19
     22a:	90 93 48 01 	sts	0x0148, r25
     22e:	80 93 47 01 	sts	0x0147, r24
	GainIn[ROLL] = GainInADC[ROLL] / 10;
     232:	6a e0       	ldi	r22, 0x0A	; 10
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__udivmodhi4>
     23a:	70 93 35 01 	sts	0x0135, r23
     23e:	60 93 34 01 	sts	0x0134, r22
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     248:	86 ec       	ldi	r24, 0xC6	; 198
     24a:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     24e:	80 91 7a 00 	lds	r24, 0x007A
     252:	86 fd       	sbrc	r24, 6
     254:	fc cf       	rjmp	.-8      	; 0x24e <ReadGainPots+0x50>
	GainInADC[ROLL] += ((uint16_t) ADCH <<8);
	GainInADC[ROLL] = 1024 - GainInADC[ROLL];
	GainIn[ROLL] = GainInADC[ROLL] / 10;

	read_adc( 4 );			// read pitch gain ADC4
	GainInADC[PITCH] = ADCL;
     256:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[PITCH] += ((uint16_t) ADCH <<8);
     25a:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[PITCH] = 1024 - GainInADC[PITCH];
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	94 e0       	ldi	r25, 0x04	; 4
     262:	82 1b       	sub	r24, r18
     264:	91 09       	sbc	r25, r1
     266:	34 2f       	mov	r19, r20
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	82 1b       	sub	r24, r18
     26c:	93 0b       	sbc	r25, r19
     26e:	90 93 4a 01 	sts	0x014A, r25
     272:	80 93 49 01 	sts	0x0149, r24
	GainIn[PITCH] = GainInADC[PITCH] / 10;
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__udivmodhi4>
     27e:	70 93 37 01 	sts	0x0137, r23
     282:	60 93 36 01 	sts	0x0136, r22
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     28c:	86 ec       	ldi	r24, 0xC6	; 198
     28e:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     292:	80 91 7a 00 	lds	r24, 0x007A
     296:	86 fd       	sbrc	r24, 6
     298:	fc cf       	rjmp	.-8      	; 0x292 <ReadGainPots+0x94>
	GainInADC[PITCH] += ((uint16_t) ADCH <<8);
	GainInADC[PITCH] = 1024 - GainInADC[PITCH];
	GainIn[PITCH] = GainInADC[PITCH] / 10;

	read_adc( 5 );			// read yaw gain ADC5
	GainInADC[YAW] = ADCL;
     29a:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[YAW] += ((uint16_t) ADCH <<8);
     29e:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[YAW] = 1024 - GainInADC[YAW];
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	94 e0       	ldi	r25, 0x04	; 4
     2a6:	82 1b       	sub	r24, r18
     2a8:	91 09       	sbc	r25, r1
     2aa:	34 2f       	mov	r19, r20
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	82 1b       	sub	r24, r18
     2b0:	93 0b       	sbc	r25, r19
     2b2:	90 93 4c 01 	sts	0x014C, r25
     2b6:	80 93 4b 01 	sts	0x014B, r24
	GainIn[YAW] = GainInADC[YAW] / 10;
     2ba:	6a e0       	ldi	r22, 0x0A	; 10
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__udivmodhi4>
     2c2:	70 93 39 01 	sts	0x0139, r23
     2c6:	60 93 38 01 	sts	0x0138, r22
}
     2ca:	08 95       	ret

000002cc <read_adc>:

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     2cc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     2d0:	86 ec       	ldi	r24, 0xC6	; 198
     2d2:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     2d6:	80 91 7a 00 	lds	r24, 0x007A
     2da:	86 fd       	sbrc	r24, 6
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <read_adc+0xa>
}
     2de:	08 95       	ret

000002e0 <ReadGyros>:

void ReadGyros(bool calibrate)
{
     2e0:	48 2f       	mov	r20, r24
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     2e8:	86 ec       	ldi	r24, 0xC6	; 198
     2ea:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     2ee:	80 91 7a 00 	lds	r24, 0x007A
     2f2:	86 fd       	sbrc	r24, 6
     2f4:	fc cf       	rjmp	.-8      	; 0x2ee <ReadGyros+0xe>
}

void ReadGyros(bool calibrate)
{
	read_adc( 2 );			// read roll gyro ADC2
	gyroADC[ROLL] = ADCL;
     2f6:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
     2fa:	20 91 79 00 	lds	r18, 0x0079
     2fe:	92 2f       	mov	r25, r18
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	bc 01       	movw	r22, r24
     304:	63 0f       	add	r22, r19
     306:	71 1d       	adc	r23, r1
     308:	9b 01       	movw	r18, r22
     30a:	70 93 1c 01 	sts	0x011C, r23
     30e:	60 93 1b 01 	sts	0x011B, r22
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output
     312:	44 23       	and	r20, r20
     314:	51 f4       	brne	.+20     	; 0x32a <ReadGyros+0x4a>
     316:	80 91 02 01 	lds	r24, 0x0102
     31a:	90 91 03 01 	lds	r25, 0x0103
     31e:	28 1b       	sub	r18, r24
     320:	39 0b       	sbc	r19, r25
     322:	30 93 1c 01 	sts	0x011C, r19
     326:	20 93 1b 01 	sts	0x011B, r18
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     330:	86 ec       	ldi	r24, 0xC6	; 198
     332:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     336:	80 91 7a 00 	lds	r24, 0x007A
     33a:	86 fd       	sbrc	r24, 6
     33c:	fc cf       	rjmp	.-8      	; 0x336 <ReadGyros+0x56>
	gyroADC[ROLL] = ADCL;
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output

	read_adc( 1 );			// read pitch gyro ADC1
	gyroADC[PITCH] = ADCL;
     33e:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[PITCH] += ((uint16_t) ADCH <<8);
     342:	20 91 79 00 	lds	r18, 0x0079
     346:	92 2f       	mov	r25, r18
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	bc 01       	movw	r22, r24
     34c:	63 0f       	add	r22, r19
     34e:	71 1d       	adc	r23, r1
     350:	9b 01       	movw	r18, r22
     352:	70 93 1e 01 	sts	0x011E, r23
     356:	60 93 1d 01 	sts	0x011D, r22
	if (!calibrate) gyroADC[PITCH] -= gyroZero[PITCH];				//remove offset from gyro output
     35a:	44 23       	and	r20, r20
     35c:	51 f4       	brne	.+20     	; 0x372 <ReadGyros+0x92>
     35e:	80 91 04 01 	lds	r24, 0x0104
     362:	90 91 05 01 	lds	r25, 0x0105
     366:	28 1b       	sub	r18, r24
     368:	39 0b       	sbc	r19, r25
     36a:	30 93 1e 01 	sts	0x011E, r19
     36e:	20 93 1d 01 	sts	0x011D, r18
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     372:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     376:	86 ec       	ldi	r24, 0xC6	; 198
     378:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     37c:	80 91 7a 00 	lds	r24, 0x007A
     380:	86 fd       	sbrc	r24, 6
     382:	fc cf       	rjmp	.-8      	; 0x37c <ReadGyros+0x9c>

#ifdef EXTERNAL_YAW_GYRO
	gyroADC[YAW] = 0;
#else
	read_adc( 0 );			// read yaw gyro ADC0
	gyroADC[YAW] = ADCL;
     384:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[YAW] += ((uint16_t) ADCH <<8);
     388:	20 91 79 00 	lds	r18, 0x0079
     38c:	92 2f       	mov	r25, r18
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	bc 01       	movw	r22, r24
     392:	63 0f       	add	r22, r19
     394:	71 1d       	adc	r23, r1
     396:	9b 01       	movw	r18, r22
     398:	70 93 20 01 	sts	0x0120, r23
     39c:	60 93 1f 01 	sts	0x011F, r22
	if (!calibrate) gyroADC[YAW]	-= gyroZero[YAW];				//remove offset from gyro output
     3a0:	44 23       	and	r20, r20
     3a2:	51 f4       	brne	.+20     	; 0x3b8 <ReadGyros+0xd8>
     3a4:	80 91 06 01 	lds	r24, 0x0106
     3a8:	90 91 07 01 	lds	r25, 0x0107
     3ac:	28 1b       	sub	r18, r24
     3ae:	39 0b       	sbc	r19, r25
     3b0:	30 93 20 01 	sts	0x0120, r19
     3b4:	20 93 1f 01 	sts	0x011F, r18
     3b8:	08 95       	ret

000003ba <CalibrateGyros>:
#endif
}

void CalibrateGyros(void)
{
     3ba:	1f 93       	push	r17
	uint8_t i;

	ReadGainPots();	// about time we did this !
     3bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ReadGainPots>

	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
     3c0:	10 92 03 01 	sts	0x0103, r1
     3c4:	10 92 02 01 	sts	0x0102, r1
	gyroZero[PITCH] = 0;	
     3c8:	10 92 05 01 	sts	0x0105, r1
     3cc:	10 92 04 01 	sts	0x0104, r1
	gyroZero[YAW] 	= 0;
     3d0:	10 92 07 01 	sts	0x0107, r1
     3d4:	10 92 06 01 	sts	0x0106, r1
     3d8:	10 e0       	ldi	r17, 0x00	; 0

	for (i=0;i<32;i++)
	{
		ReadGyros(true);
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ReadGyros>
	
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
     3e0:	60 91 02 01 	lds	r22, 0x0102
     3e4:	70 91 03 01 	lds	r23, 0x0103
     3e8:	80 91 1b 01 	lds	r24, 0x011B
     3ec:	90 91 1c 01 	lds	r25, 0x011C
     3f0:	68 0f       	add	r22, r24
     3f2:	79 1f       	adc	r23, r25
     3f4:	70 93 03 01 	sts	0x0103, r23
     3f8:	60 93 02 01 	sts	0x0102, r22
		gyroZero[PITCH] += gyroADC[PITCH];	
     3fc:	40 91 04 01 	lds	r20, 0x0104
     400:	50 91 05 01 	lds	r21, 0x0105
     404:	80 91 1d 01 	lds	r24, 0x011D
     408:	90 91 1e 01 	lds	r25, 0x011E
     40c:	48 0f       	add	r20, r24
     40e:	59 1f       	adc	r21, r25
     410:	50 93 05 01 	sts	0x0105, r21
     414:	40 93 04 01 	sts	0x0104, r20
		gyroZero[YAW] 	+= gyroADC[YAW];
     418:	20 91 06 01 	lds	r18, 0x0106
     41c:	30 91 07 01 	lds	r19, 0x0107
     420:	80 91 1f 01 	lds	r24, 0x011F
     424:	90 91 20 01 	lds	r25, 0x0120
     428:	28 0f       	add	r18, r24
     42a:	39 1f       	adc	r19, r25
     42c:	30 93 07 01 	sts	0x0107, r19
     430:	20 93 06 01 	sts	0x0106, r18
	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
	gyroZero[PITCH] = 0;	
	gyroZero[YAW] 	= 0;

	for (i=0;i<32;i++)
     434:	1f 5f       	subi	r17, 0xFF	; 255
     436:	10 32       	cpi	r17, 0x20	; 32
     438:	81 f6       	brne	.-96     	; 0x3da <CalibrateGyros+0x20>
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
		gyroZero[PITCH] += gyroADC[PITCH];	
		gyroZero[YAW] 	+= gyroADC[YAW];
	}

	gyroZero[ROLL] 	= (gyroZero[ROLL] >> 5);						
     43a:	e5 e0       	ldi	r30, 0x05	; 5
     43c:	75 95       	asr	r23
     43e:	67 95       	ror	r22
     440:	ea 95       	dec	r30
     442:	e1 f7       	brne	.-8      	; 0x43c <CalibrateGyros+0x82>
     444:	70 93 03 01 	sts	0x0103, r23
     448:	60 93 02 01 	sts	0x0102, r22
	gyroZero[PITCH] = (gyroZero[PITCH] >> 5);
     44c:	95 e0       	ldi	r25, 0x05	; 5
     44e:	55 95       	asr	r21
     450:	47 95       	ror	r20
     452:	9a 95       	dec	r25
     454:	e1 f7       	brne	.-8      	; 0x44e <CalibrateGyros+0x94>
     456:	50 93 05 01 	sts	0x0105, r21
     45a:	40 93 04 01 	sts	0x0104, r20
	gyroZero[YAW] 	= (gyroZero[YAW] >> 5);
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	35 95       	asr	r19
     462:	27 95       	ror	r18
     464:	8a 95       	dec	r24
     466:	e1 f7       	brne	.-8      	; 0x460 <CalibrateGyros+0xa6>
     468:	30 93 07 01 	sts	0x0107, r19
     46c:	20 93 06 01 	sts	0x0106, r18

	GyroCalibrated = true;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 23 01 	sts	0x0123, r24
}
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <RxGetChannels>:
//--- Get and scale RX channel inputs ---
void RxGetChannels(void)
{
	static int16_t RxChannel;

	while ( RxChannelsUpdatingFlag );
     47a:	80 91 51 01 	lds	r24, 0x0151
     47e:	88 23       	and	r24, r24
     480:	e1 f7       	brne	.-8      	; 0x47a <RxGetChannels>

	RxChannel = RxChannel1;
     482:	80 91 52 01 	lds	r24, 0x0152
     486:	90 91 53 01 	lds	r25, 0x0153
	RxChannel -= Config.RxChannel1ZeroOffset;				// normalise
	RxInRoll = (RxChannel >> 2);                    //     "
     48a:	20 91 5a 01 	lds	r18, 0x015A
     48e:	30 91 5b 01 	lds	r19, 0x015B
     492:	82 1b       	sub	r24, r18
     494:	93 0b       	sbc	r25, r19
     496:	95 95       	asr	r25
     498:	87 95       	ror	r24
     49a:	95 95       	asr	r25
     49c:	87 95       	ror	r24
     49e:	90 93 29 01 	sts	0x0129, r25
     4a2:	80 93 28 01 	sts	0x0128, r24

	while ( RxChannelsUpdatingFlag );
     4a6:	80 91 51 01 	lds	r24, 0x0151
     4aa:	88 23       	and	r24, r24
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <RxGetChannels+0x2c>

	RxChannel = RxChannel2;
     4ae:	80 91 3a 01 	lds	r24, 0x013A
     4b2:	90 91 3b 01 	lds	r25, 0x013B
	RxChannel -= Config.RxChannel2ZeroOffset;				// normalise
	RxInPitch = (RxChannel >> 2);                   //     "
     4b6:	20 91 5c 01 	lds	r18, 0x015C
     4ba:	30 91 5d 01 	lds	r19, 0x015D
     4be:	82 1b       	sub	r24, r18
     4c0:	93 0b       	sbc	r25, r19
     4c2:	95 95       	asr	r25
     4c4:	87 95       	ror	r24
     4c6:	95 95       	asr	r25
     4c8:	87 95       	ror	r24
     4ca:	90 93 43 01 	sts	0x0143, r25
     4ce:	80 93 42 01 	sts	0x0142, r24

	while ( RxChannelsUpdatingFlag );
     4d2:	80 91 51 01 	lds	r24, 0x0151
     4d6:	88 23       	and	r24, r24
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <RxGetChannels+0x58>

	RxChannel = RxChannel3;
     4da:	80 91 4f 01 	lds	r24, 0x014F
     4de:	90 91 50 01 	lds	r25, 0x0150
	RxChannel -= Config.RxChannel3ZeroOffset;				// scale 0->100
	RxInCollective = (RxChannel >> 3);              // 
     4e2:	20 91 5e 01 	lds	r18, 0x015E
     4e6:	30 91 5f 01 	lds	r19, 0x015F
     4ea:	82 1b       	sub	r24, r18
     4ec:	93 0b       	sbc	r25, r19
     4ee:	a3 e0       	ldi	r26, 0x03	; 3
     4f0:	95 95       	asr	r25
     4f2:	87 95       	ror	r24
     4f4:	aa 95       	dec	r26
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <RxGetChannels+0x76>
     4f8:	90 93 1a 01 	sts	0x011A, r25
     4fc:	80 93 19 01 	sts	0x0119, r24

	while ( RxChannelsUpdatingFlag );
     500:	80 91 51 01 	lds	r24, 0x0151
     504:	88 23       	and	r24, r24
     506:	e1 f7       	brne	.-8      	; 0x500 <__stack+0x1>

	RxChannel = RxChannel4;
     508:	80 91 26 01 	lds	r24, 0x0126
     50c:	90 91 27 01 	lds	r25, 0x0127
	RxChannel -= Config.RxChannel4ZeroOffset;				// normalise
     510:	20 91 60 01 	lds	r18, 0x0160
     514:	30 91 61 01 	lds	r19, 0x0161
     518:	82 1b       	sub	r24, r18
     51a:	93 0b       	sbc	r25, r19
     51c:	90 93 14 01 	sts	0x0114, r25
     520:	80 93 13 01 	sts	0x0113, r24
	RxInYaw = (RxChannel >> 2);                     //     "
     524:	95 95       	asr	r25
     526:	87 95       	ror	r24
     528:	95 95       	asr	r25
     52a:	87 95       	ror	r24
     52c:	90 93 2b 01 	sts	0x012B, r25
     530:	80 93 2a 01 	sts	0x012A, r24

}
     534:	08 95       	ret

00000536 <output_motor_ppm>:
#if defined(SINGLE_COPTER) || defined(DUAL_COPTER) || defined(TRI_COPTER)
	static uint8_t ServoPPMRateCount;
#endif

	// if ESC's are high, we need to turn them off
	if (output_motor_high)
     536:	80 91 08 01 	lds	r24, 0x0108
     53a:	88 23       	and	r24, r24
     53c:	09 f4       	brne	.+2      	; 0x540 <output_motor_ppm+0xa>
     53e:	db c0       	rjmp	.+438    	; 0x6f6 <output_motor_ppm+0x1c0>
		else if ( MotorOut3 > 200 ) MotorOut3 = 200;
		if ( MotorOut4 < 0 ) MotorOut4 = 0;
		else if ( MotorOut4 > 200 ) MotorOut4 = 200;
#else
		// set motor limits (0 -> 100)
		if ( MotorOut1 < 0 ) MotorOut1 = 0;
     540:	80 91 21 01 	lds	r24, 0x0121
     544:	90 91 22 01 	lds	r25, 0x0122
     548:	97 ff       	sbrs	r25, 7
     54a:	05 c0       	rjmp	.+10     	; 0x556 <output_motor_ppm+0x20>
     54c:	10 92 22 01 	sts	0x0122, r1
     550:	10 92 21 01 	sts	0x0121, r1
     554:	09 c0       	rjmp	.+18     	; 0x568 <output_motor_ppm+0x32>
		else if ( MotorOut1 > 100 ) MotorOut1 = 100;
     556:	85 36       	cpi	r24, 0x65	; 101
     558:	91 05       	cpc	r25, r1
     55a:	34 f0       	brlt	.+12     	; 0x568 <output_motor_ppm+0x32>
     55c:	84 e6       	ldi	r24, 0x64	; 100
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 22 01 	sts	0x0122, r25
     564:	80 93 21 01 	sts	0x0121, r24
		if ( MotorOut2 < 0 ) MotorOut2 = 0;
     568:	80 91 2c 01 	lds	r24, 0x012C
     56c:	90 91 2d 01 	lds	r25, 0x012D
     570:	97 ff       	sbrs	r25, 7
     572:	05 c0       	rjmp	.+10     	; 0x57e <output_motor_ppm+0x48>
     574:	10 92 2d 01 	sts	0x012D, r1
     578:	10 92 2c 01 	sts	0x012C, r1
     57c:	09 c0       	rjmp	.+18     	; 0x590 <output_motor_ppm+0x5a>
		else if ( MotorOut2 > 100 ) MotorOut2 = 100;
     57e:	85 36       	cpi	r24, 0x65	; 101
     580:	91 05       	cpc	r25, r1
     582:	34 f0       	brlt	.+12     	; 0x590 <output_motor_ppm+0x5a>
     584:	84 e6       	ldi	r24, 0x64	; 100
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	90 93 2d 01 	sts	0x012D, r25
     58c:	80 93 2c 01 	sts	0x012C, r24
		if ( MotorOut3 < 0 ) MotorOut3 = 0;
     590:	80 91 3e 01 	lds	r24, 0x013E
     594:	90 91 3f 01 	lds	r25, 0x013F
     598:	97 ff       	sbrs	r25, 7
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <output_motor_ppm+0x70>
     59c:	10 92 3f 01 	sts	0x013F, r1
     5a0:	10 92 3e 01 	sts	0x013E, r1
     5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <output_motor_ppm+0x82>
		else if ( MotorOut3 > 100 ) MotorOut3 = 100;
     5a6:	85 36       	cpi	r24, 0x65	; 101
     5a8:	91 05       	cpc	r25, r1
     5aa:	34 f0       	brlt	.+12     	; 0x5b8 <output_motor_ppm+0x82>
     5ac:	84 e6       	ldi	r24, 0x64	; 100
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	90 93 3f 01 	sts	0x013F, r25
     5b4:	80 93 3e 01 	sts	0x013E, r24
		if ( MotorOut4 < 0 ) MotorOut4 = 0;
     5b8:	80 91 32 01 	lds	r24, 0x0132
     5bc:	90 91 33 01 	lds	r25, 0x0133
     5c0:	97 ff       	sbrs	r25, 7
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <output_motor_ppm+0x98>
     5c4:	10 92 33 01 	sts	0x0133, r1
     5c8:	10 92 32 01 	sts	0x0132, r1
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <output_motor_ppm+0xaa>
		else if ( MotorOut4 > 100 ) MotorOut4 = 100;
     5ce:	85 36       	cpi	r24, 0x65	; 101
     5d0:	91 05       	cpc	r25, r1
     5d2:	34 f0       	brlt	.+12     	; 0x5e0 <output_motor_ppm+0xaa>
     5d4:	84 e6       	ldi	r24, 0x64	; 100
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 33 01 	sts	0x0133, r25
     5dc:	80 93 32 01 	sts	0x0132, r24
		else if ( MotorOut6 > 100 ) MotorOut6 = 100;
	#endif
#endif

		// now calculate the time already passed that Motors were HIGH
		ElapsedTCNT1 = (TCNT1 - MotorStartTCNT1);
     5e0:	80 91 84 00 	lds	r24, 0x0084
     5e4:	90 91 85 00 	lds	r25, 0x0085
     5e8:	20 91 10 01 	lds	r18, 0x0110
     5ec:	30 91 11 01 	lds	r19, 0x0111
     5f0:	82 1b       	sub	r24, r18
     5f2:	93 0b       	sbc	r25, r19
     5f4:	90 93 0f 01 	sts	0x010F, r25
     5f8:	80 93 0e 01 	sts	0x010E, r24

		// start output timer
		TIFR0 &= ~(1 << TOV0);			// clr overflow
     5fc:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     5fe:	16 bc       	out	0x26, r1	; 38

		// convert into 10uS intervals
		num_of_10uS = (ElapsedTCNT1 / 10) + 1;
     600:	6a e0       	ldi	r22, 0x0A	; 10
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__udivmodhi4>
     608:	6f 5f       	subi	r22, 0xFF	; 255
     60a:	60 93 09 01 	sts	0x0109, r22
		MotorAdjust = 100 - num_of_10uS;
     60e:	26 2f       	mov	r18, r22
     610:	33 27       	eor	r19, r19
     612:	27 fd       	sbrc	r18, 7
     614:	30 95       	com	r19
     616:	84 e6       	ldi	r24, 0x64	; 100
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	82 1b       	sub	r24, r18
     61c:	93 0b       	sbc	r25, r19
     61e:	90 93 0d 01 	sts	0x010D, r25
     622:	80 93 0c 01 	sts	0x010C, r24
		// add adjustment (1mS - time already gone) to all channels
		MotorOut1 += MotorAdjust;
		MotorOut2 += MotorAdjust;
#else
		// add adjustment (1mS - time already gone) to all channels
		MotorOut1 += MotorAdjust;
     626:	a0 91 21 01 	lds	r26, 0x0121
     62a:	b0 91 22 01 	lds	r27, 0x0122
     62e:	a8 0f       	add	r26, r24
     630:	b9 1f       	adc	r27, r25
		MotorOut2 += MotorAdjust;
     632:	e0 91 2c 01 	lds	r30, 0x012C
     636:	f0 91 2d 01 	lds	r31, 0x012D
     63a:	e8 0f       	add	r30, r24
     63c:	f9 1f       	adc	r31, r25
		MotorOut3 += MotorAdjust;
     63e:	40 91 3e 01 	lds	r20, 0x013E
     642:	50 91 3f 01 	lds	r21, 0x013F
     646:	48 0f       	add	r20, r24
     648:	59 1f       	adc	r21, r25
		MotorOut4 += MotorAdjust;
     64a:	20 91 32 01 	lds	r18, 0x0132
     64e:	30 91 33 01 	lds	r19, 0x0133
     652:	28 0f       	add	r18, r24
     654:	39 1f       	adc	r19, r25
		// Pulse len = 1   -> 2    mS

		// Servo = 0 - 200
		// Pulse len = 0 -> 2.3ms

		TIFR0 &= ~(1 << TOV0);			// clr overflow
     656:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     658:	16 bc       	out	0x26, r1	; 38
     65a:	1f c0       	rjmp	.+62     	; 0x69a <output_motor_ppm+0x164>
			}
		}
#else
		for (i=num_of_10uS;i<200;i++)	
		{
			while (TCNT0 < 80);			// 10uS @ 8MHz = 80 // 10 @ 1MHz = 10uS
     65c:	86 b5       	in	r24, 0x26	; 38
     65e:	80 35       	cpi	r24, 0x50	; 80
     660:	e8 f3       	brcs	.-6      	; 0x65c <output_motor_ppm+0x126>
			TCNT0 -= 80;
     662:	86 b5       	in	r24, 0x26	; 38
     664:	80 55       	subi	r24, 0x50	; 80
     666:	86 bd       	out	0x26, r24	; 38

			if (MotorOut1) 
     668:	10 97       	sbiw	r26, 0x00	; 0
     66a:	19 f0       	breq	.+6      	; 0x672 <output_motor_ppm+0x13c>
			{
				MotorOut1--;
     66c:	11 97       	sbiw	r26, 0x01	; 1
				if (MotorOut1==0) M1 = 0;
     66e:	09 f4       	brne	.+2      	; 0x672 <output_motor_ppm+0x13c>
     670:	2a 98       	cbi	0x05, 2	; 5
			}
			if (MotorOut2) 
     672:	30 97       	sbiw	r30, 0x00	; 0
     674:	19 f0       	breq	.+6      	; 0x67c <output_motor_ppm+0x146>
			{
				MotorOut2--;
     676:	31 97       	sbiw	r30, 0x01	; 1
				if (MotorOut2==0) M2 = 0;
     678:	09 f4       	brne	.+2      	; 0x67c <output_motor_ppm+0x146>
     67a:	29 98       	cbi	0x05, 1	; 5
			}
			if (MotorOut3) 
     67c:	41 15       	cp	r20, r1
     67e:	51 05       	cpc	r21, r1
     680:	21 f0       	breq	.+8      	; 0x68a <output_motor_ppm+0x154>
			{
				MotorOut3--;
     682:	41 50       	subi	r20, 0x01	; 1
     684:	50 40       	sbci	r21, 0x00	; 0
				if (MotorOut3==0) M3 = 0;
     686:	09 f4       	brne	.+2      	; 0x68a <output_motor_ppm+0x154>
     688:	28 98       	cbi	0x05, 0	; 5
			}
			if (MotorOut4) 
     68a:	21 15       	cp	r18, r1
     68c:	31 05       	cpc	r19, r1
     68e:	21 f0       	breq	.+8      	; 0x698 <output_motor_ppm+0x162>
			{
				MotorOut4--;
     690:	21 50       	subi	r18, 0x01	; 1
     692:	30 40       	sbci	r19, 0x00	; 0
				if (MotorOut4==0) M4 = 0;
     694:	09 f4       	brne	.+2      	; 0x698 <output_motor_ppm+0x162>
     696:	5f 98       	cbi	0x0b, 7	; 11
     698:	6f 5f       	subi	r22, 0xFF	; 255
				MotorOut4--;
				if (MotorOut4==0) M4 = 0;
			}
		}
#else
		for (i=num_of_10uS;i<200;i++)	
     69a:	68 3c       	cpi	r22, 0xC8	; 200
     69c:	f8 f2       	brcs	.-66     	; 0x65c <output_motor_ppm+0x126>
     69e:	b0 93 22 01 	sts	0x0122, r27
     6a2:	a0 93 21 01 	sts	0x0121, r26
     6a6:	f0 93 2d 01 	sts	0x012D, r31
     6aa:	e0 93 2c 01 	sts	0x012C, r30
     6ae:	50 93 3f 01 	sts	0x013F, r21
     6b2:	40 93 3e 01 	sts	0x013E, r20
     6b6:	30 93 33 01 	sts	0x0133, r19
     6ba:	20 93 32 01 	sts	0x0132, r18
     6be:	60 93 12 01 	sts	0x0112, r22
	#endif
		}
#endif

		//Now wait low signal interval
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;
     6c2:	20 91 00 01 	lds	r18, 0x0100
     6c6:	30 91 01 01 	lds	r19, 0x0101
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	30 40       	sbci	r19, 0x00	; 0

		TIFR0 &= ~(1 << TOV0);		// clr overflow
     6ce:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;					// reset counter
     6d0:	16 bc       	out	0x26, r1	; 38
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <output_motor_ppm+0x1ae>

		while (PWM_Low_Count--)
		{
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
     6d4:	86 b5       	in	r24, 0x26	; 38
     6d6:	80 35       	cpi	r24, 0x50	; 80
     6d8:	e8 f3       	brcs	.-6      	; 0x6d4 <output_motor_ppm+0x19e>
			TCNT0 -= 80;
     6da:	86 b5       	in	r24, 0x26	; 38
     6dc:	80 55       	subi	r24, 0x50	; 80
     6de:	86 bd       	out	0x26, r24	; 38
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;

		TIFR0 &= ~(1 << TOV0);		// clr overflow
		TCNT0 = 0;					// reset counter

		while (PWM_Low_Count--)
     6e4:	21 15       	cp	r18, r1
     6e6:	31 05       	cpc	r19, r1
     6e8:	a9 f7       	brne	.-22     	; 0x6d4 <output_motor_ppm+0x19e>
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	9f ef       	ldi	r25, 0xFF	; 255
     6ee:	90 93 0b 01 	sts	0x010B, r25
     6f2:	80 93 0a 01 	sts	0x010A, r24
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
			TCNT0 -= 80;
		}
	}

	if (! Armed) return;
     6f6:	80 91 44 01 	lds	r24, 0x0144
     6fa:	88 23       	and	r24, r24
     6fc:	79 f0       	breq	.+30     	; 0x71c <output_motor_ppm+0x1e6>

	// Log PWM signal HIGH	
	MotorStartTCNT1 = TCNT1;
     6fe:	80 91 84 00 	lds	r24, 0x0084
     702:	90 91 85 00 	lds	r25, 0x0085
     706:	90 93 11 01 	sts	0x0111, r25
     70a:	80 93 10 01 	sts	0x0110, r24
	output_motor_high = true;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 08 01 	sts	0x0108, r24
		ServoPPMRateCount = 1;
	} else {
		ServoPPMRateCount++;
	}
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER)
	M1 = 1;
     714:	2a 9a       	sbi	0x05, 2	; 5
	M2 = 1;
     716:	29 9a       	sbi	0x05, 1	; 5
	M3 = 1;
     718:	28 9a       	sbi	0x05, 0	; 5
	M4 = 1;
     71a:	5f 9a       	sbi	0x0b, 7	; 11
     71c:	08 95       	ret

0000071e <Set_EEPROM_Default_Config>:
	}
}

void Set_EEPROM_Default_Config(void)
{
	Config.RollGyroDirection 		= GYRO_REVERSED;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 57 01 	sts	0x0157, r24
	Config.PitchGyroDirection		= GYRO_REVERSED;
     724:	80 93 58 01 	sts	0x0158, r24
	Config.YawGyroDirection			= GYRO_NORMAL;
     728:	10 92 59 01 	sts	0x0159, r1

	Config.RxChannel1ZeroOffset	= 1520;
     72c:	20 ef       	ldi	r18, 0xF0	; 240
     72e:	35 e0       	ldi	r19, 0x05	; 5
     730:	30 93 5b 01 	sts	0x015B, r19
     734:	20 93 5a 01 	sts	0x015A, r18
	Config.RxChannel2ZeroOffset	= 1520;
     738:	30 93 5d 01 	sts	0x015D, r19
     73c:	20 93 5c 01 	sts	0x015C, r18
	Config.RxChannel3ZeroOffset	= 1120;
     740:	80 e6       	ldi	r24, 0x60	; 96
     742:	94 e0       	ldi	r25, 0x04	; 4
     744:	90 93 5f 01 	sts	0x015F, r25
     748:	80 93 5e 01 	sts	0x015E, r24
	Config.RxChannel4ZeroOffset	= 1520;
     74c:	30 93 61 01 	sts	0x0161, r19
     750:	20 93 60 01 	sts	0x0160, r18
}
     754:	08 95       	ret

00000756 <delay_us>:

//////////////////////////////////////////////////////////
// Minsoo Kim

void delay_us(uint8_t time)            /* time delay for us */
{ 
     756:	08 c0       	rjmp	.+16     	; 0x768 <delay_us+0x12>
	...
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
//	asm volatile ("NOP"); asm volatile ("NOP"); 
//	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); 
     764:	00 00       	nop
     766:	81 50       	subi	r24, 0x01	; 1
//////////////////////////////////////////////////////////
// Minsoo Kim

void delay_us(uint8_t time)            /* time delay for us */
{ 
 while(time--)
     768:	88 23       	and	r24, r24
     76a:	b1 f7       	brne	.-20     	; 0x758 <delay_us+0x2>
	asm volatile ("NOP"); asm volatile ("NOP"); 
//	asm volatile ("NOP"); asm volatile ("NOP"); 
//	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); 
 }
}
     76c:	08 95       	ret

0000076e <delay_ms>:

void delay_ms(uint16_t time)
{
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	ec 01       	movw	r28, r24
     776:	08 c0       	rjmp	.+16     	; 0x788 <delay_ms+0x1a>
	uint8_t i;
	while(time--)
     778:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;i<10;i++) delay_us(100);
     77a:	84 e6       	ldi	r24, 0x64	; 100
     77c:	0e 94 ab 03 	call	0x756	; 0x756 <delay_us>
     780:	1f 5f       	subi	r17, 0xFF	; 255
     782:	1a 30       	cpi	r17, 0x0A	; 10
     784:	d1 f7       	brne	.-12     	; 0x77a <delay_ms+0xc>
     786:	21 97       	sbiw	r28, 0x01	; 1
}

void delay_ms(uint16_t time)
{
	uint8_t i;
	while(time--)
     788:	20 97       	sbiw	r28, 0x00	; 0
     78a:	b1 f7       	brne	.-20     	; 0x778 <delay_ms+0xa>
	{
		for(i=0;i<10;i++) delay_us(100);
	}
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	08 95       	ret

00000794 <loop>:
		}
	}
}

void loop(void)
{
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
	static uint8_t i;
	static uint16_t Change_Arming=0;
	static uint8_t Arming_TCNT2=0;

	RxGetChannels();
     7a0:	0e 94 3d 02 	call	0x47a	; 0x47a <RxGetChannels>

	if (RxInCollective < 0) {
     7a4:	80 91 19 01 	lds	r24, 0x0119
     7a8:	90 91 1a 01 	lds	r25, 0x011A
     7ac:	97 ff       	sbrs	r25, 7
     7ae:	43 c1       	rjmp	.+646    	; 0xa36 <loop+0x2a2>
		// check for stick arming (Timer2 @ 8MHz/1024 = 7812.5KHz)
		// arm: yaw right (>60), dis-arm: yaw left (<-60)
		Change_Arming += (uint8_t) (TCNT2 - Arming_TCNT2);
     7b0:	20 91 b2 00 	lds	r18, 0x00B2
     7b4:	80 91 15 01 	lds	r24, 0x0115
     7b8:	28 1b       	sub	r18, r24
     7ba:	80 91 16 01 	lds	r24, 0x0116
     7be:	90 91 17 01 	lds	r25, 0x0117
     7c2:	82 0f       	add	r24, r18
     7c4:	91 1d       	adc	r25, r1
     7c6:	90 93 17 01 	sts	0x0117, r25
     7ca:	80 93 16 01 	sts	0x0116, r24
		Arming_TCNT2 = TCNT2;
     7ce:	80 91 b2 00 	lds	r24, 0x00B2
     7d2:	80 93 15 01 	sts	0x0115, r24

		if (!Armed) {		// nb to switch to Right-Side Arming: if (!Armed) {
     7d6:	20 91 44 01 	lds	r18, 0x0144
     7da:	80 91 2a 01 	lds	r24, 0x012A
     7de:	90 91 2b 01 	lds	r25, 0x012B
     7e2:	22 23       	and	r18, r18
     7e4:	19 f4       	brne	.+6      	; 0x7ec <loop+0x58>
			if (RxInYaw<STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count
     7e6:	cc 97       	sbiw	r24, 0x3c	; 60
     7e8:	7c f0       	brlt	.+30     	; 0x808 <loop+0x74>
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <loop+0x5e>
		} else {
			if (RxInYaw>-STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count, Minsoo
     7ec:	85 5c       	subi	r24, 0xC5	; 197
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
     7f0:	5c f4       	brge	.+22     	; 0x808 <loop+0x74>
     7f2:	80 91 42 01 	lds	r24, 0x0142
     7f6:	90 91 43 01 	lds	r25, 0x0143
     7fa:	97 ff       	sbrs	r25, 7
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <loop+0x70>
     7fe:	90 95       	com	r25
     800:	81 95       	neg	r24
     802:	9f 4f       	sbci	r25, 0xFF	; 255
     804:	4f 97       	sbiw	r24, 0x1f	; 31
     806:	24 f0       	brlt	.+8      	; 0x810 <loop+0x7c>
     808:	10 92 17 01 	sts	0x0117, r1
     80c:	10 92 16 01 	sts	0x0116, r1
		}

		// 3Sec / 0.000128 = 23437 = 0x5B8D or 
		// 2.5Sec / 0.000128 = 19531 = 0x4C4B
		// 0.5Sec / 0.000128 = 3906 = 0x0F42	// Minsoo
		if (Change_Arming>0x0F42)
     810:	80 91 16 01 	lds	r24, 0x0116
     814:	90 91 17 01 	lds	r25, 0x0117
     818:	83 54       	subi	r24, 0x43	; 67
     81a:	9f 40       	sbci	r25, 0x0F	; 15
     81c:	10 f1       	brcs	.+68     	; 0x862 <loop+0xce>
		{
			Armed = ! Armed;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	82 27       	eor	r24, r18
     822:	80 93 44 01 	sts	0x0144, r24
			LED = 0;
     826:	2e 98       	cbi	0x05, 6	; 5
			ModeDelayCounter = 0;
     828:	10 92 55 01 	sts	0x0155, r1
     82c:	10 92 54 01 	sts	0x0154, r1

			if (Armed) {
     830:	88 23       	and	r24, r24
     832:	a1 f0       	breq	.+40     	; 0x85c <loop+0xc8>
				CalibrateGyros();
     834:	0e 94 dd 01 	call	0x3ba	; 0x3ba <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     838:	10 92 08 01 	sts	0x0108, r1
				LED = 1;
     83c:	2e 9a       	sbi	0x05, 6	; 5

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     83e:	82 e3       	ldi	r24, 0x32	; 50
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	90 93 3d 01 	sts	0x013D, r25
     846:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     84a:	90 93 2f 01 	sts	0x012F, r25
     84e:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     852:	90 93 41 01 	sts	0x0141, r25
     856:	80 93 40 01 	sts	0x0140, r24
     85a:	41 c2       	rjmp	.+1154   	; 0xcde <loop+0x54a>
			} else if (output_motor_high) {
     85c:	80 91 08 01 	lds	r24, 0x0108
     860:	3a c2       	rjmp	.+1140   	; 0xcd6 <loop+0x542>
		}

		// --- Calibrate gyro when collective below 1% ---
		//if ( RxInCollective < 1 && Armed && abs(RxInRoll) <20 && abs(RxInPitch) <20)
		// --- Calibrate gyro when Thr: Low, Elevator: Down, Rudder: Left --- (Minsoo)
		if (Armed && RxInYaw < -STICK_ARMING && RxInPitch > STICK_ARMING)
     862:	22 23       	and	r18, r18
     864:	09 f4       	brne	.+2      	; 0x868 <loop+0xd4>
     866:	48 c0       	rjmp	.+144    	; 0x8f8 <loop+0x164>
     868:	80 91 2a 01 	lds	r24, 0x012A
     86c:	90 91 2b 01 	lds	r25, 0x012B
     870:	84 5c       	subi	r24, 0xC4	; 196
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	0c f0       	brlt	.+2      	; 0x878 <loop+0xe4>
     876:	40 c0       	rjmp	.+128    	; 0x8f8 <loop+0x164>
     878:	80 91 42 01 	lds	r24, 0x0142
     87c:	90 91 43 01 	lds	r25, 0x0143
     880:	cd 97       	sbiw	r24, 0x3d	; 61
     882:	d4 f1       	brlt	.+116    	; 0x8f8 <loop+0x164>
		{
			if (ModeDelayCounter==0)
     884:	80 91 54 01 	lds	r24, 0x0154
     888:	90 91 55 01 	lds	r25, 0x0155
     88c:	89 2b       	or	r24, r25
     88e:	59 f5       	brne	.+86     	; 0x8e6 <loop+0x152>
			{
				//ModeDelayCounter = 0xFB4F;	// 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	// 0xFFFF-FE6F=0x190=400/400 = 1Seconds (Minsoo)
     890:	8f e6       	ldi	r24, 0x6F	; 111
     892:	9e ef       	ldi	r25, 0xFE	; 254
     894:	90 93 55 01 	sts	0x0155, r25
     898:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     89c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     8a0:	10 92 08 01 	sts	0x0108, r1
				delay_ms(150);
     8a4:	86 e9       	ldi	r24, 0x96	; 150
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     8ac:	82 e3       	ldi	r24, 0x32	; 50
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 3d 01 	sts	0x013D, r25
     8b4:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     8b8:	90 93 2f 01 	sts	0x012F, r25
     8bc:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     8c0:	90 93 41 01 	sts	0x0141, r25
     8c4:	80 93 40 01 	sts	0x0140, r24

				// flash LED 1 time
				for (i=0;i<1;i++)
     8c8:	10 92 18 01 	sts	0x0118, r1
				{
					LED = 0;
     8cc:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     8ce:	89 e1       	ldi	r24, 0x19	; 25
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
					LED = 1;
     8d6:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     8d8:	89 e1       	ldi	r24, 0x19	; 25
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
				StickYawGain = NORMAL_STICK_YAW_GAIN;

				// flash LED 1 time
				for (i=0;i<1;i++)
     8e2:	80 93 18 01 	sts	0x0118, r24
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     8e6:	80 91 54 01 	lds	r24, 0x0154
     8ea:	90 91 55 01 	lds	r25, 0x0155
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	90 93 55 01 	sts	0x0155, r25
     8f4:	80 93 54 01 	sts	0x0154, r24
		}


		// --- Acro Mode when Thr: Low, Elevator: Up, Rudder: Left --- (Minsoo)
		if (Armed && RxInYaw < -STICK_ARMING && RxInPitch < -STICK_ARMING)
     8f8:	80 91 44 01 	lds	r24, 0x0144
     8fc:	88 23       	and	r24, r24
     8fe:	09 f4       	brne	.+2      	; 0x902 <loop+0x16e>
     900:	4d c0       	rjmp	.+154    	; 0x99c <loop+0x208>
     902:	80 91 2a 01 	lds	r24, 0x012A
     906:	90 91 2b 01 	lds	r25, 0x012B
     90a:	84 5c       	subi	r24, 0xC4	; 196
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	0c f0       	brlt	.+2      	; 0x912 <loop+0x17e>
     910:	45 c0       	rjmp	.+138    	; 0x99c <loop+0x208>
     912:	80 91 42 01 	lds	r24, 0x0142
     916:	90 91 43 01 	lds	r25, 0x0143
     91a:	84 5c       	subi	r24, 0xC4	; 196
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	f4 f5       	brge	.+124    	; 0x99c <loop+0x208>
		{
			if (ModeDelayCounter==0)
     920:	80 91 54 01 	lds	r24, 0x0154
     924:	90 91 55 01 	lds	r25, 0x0155
     928:	89 2b       	or	r24, r25
     92a:	79 f5       	brne	.+94     	; 0x98a <loop+0x1f6>
			{
				//ModeDelayCounter = 0xFB4F;	// 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	// 0xFFFF-FE6F=0x190=400/400 = 1Seconds (Minsoo)
     92c:	8f e6       	ldi	r24, 0x6F	; 111
     92e:	9e ef       	ldi	r25, 0xFE	; 254
     930:	90 93 55 01 	sts	0x0155, r25
     934:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     938:	0e 94 dd 01 	call	0x3ba	; 0x3ba <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     93c:	10 92 08 01 	sts	0x0108, r1
				delay_ms(100);
     940:	84 e6       	ldi	r24, 0x64	; 100
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>

				// Acro
				StickRollGain = ACRO_STICK_ROLL_GAIN;
     948:	81 e4       	ldi	r24, 0x41	; 65
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 3d 01 	sts	0x013D, r25
     950:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = ACRO_STICK_PITCH_GAIN;
     954:	90 93 2f 01 	sts	0x012F, r25
     958:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = ACRO_STICK_YAW_GAIN;
     95c:	90 93 41 01 	sts	0x0141, r25
     960:	80 93 40 01 	sts	0x0140, r24

				// flash LED 2 times
				for (i=0;i<2;i++)
     964:	10 92 18 01 	sts	0x0118, r1
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	0b c0       	rjmp	.+22     	; 0x982 <loop+0x1ee>
				{
					LED = 0;
     96c:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     96e:	89 e1       	ldi	r24, 0x19	; 25
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
					LED = 1;
     976:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     978:	89 e1       	ldi	r24, 0x19	; 25
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
     980:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = ACRO_STICK_ROLL_GAIN;
				StickPitchGain = ACRO_STICK_PITCH_GAIN;
				StickYawGain = ACRO_STICK_YAW_GAIN;

				// flash LED 2 times
				for (i=0;i<2;i++)
     982:	12 30       	cpi	r17, 0x02	; 2
     984:	98 f3       	brcs	.-26     	; 0x96c <loop+0x1d8>
     986:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     98a:	80 91 54 01 	lds	r24, 0x0154
     98e:	90 91 55 01 	lds	r25, 0x0155
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	90 93 55 01 	sts	0x0155, r25
     998:	80 93 54 01 	sts	0x0154, r24
		}

		// --- UFO Mode when Thr: Low, Elevator: Up, Rudder: Right --- (Minsoo)
		if (Armed && RxInYaw > STICK_ARMING && RxInPitch < -STICK_ARMING)
     99c:	80 91 44 01 	lds	r24, 0x0144
     9a0:	88 23       	and	r24, r24
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <loop+0x212>
     9a4:	48 c0       	rjmp	.+144    	; 0xa36 <loop+0x2a2>
     9a6:	80 91 2a 01 	lds	r24, 0x012A
     9aa:	90 91 2b 01 	lds	r25, 0x012B
     9ae:	cd 97       	sbiw	r24, 0x3d	; 61
     9b0:	0c f4       	brge	.+2      	; 0x9b4 <loop+0x220>
     9b2:	41 c0       	rjmp	.+130    	; 0xa36 <loop+0x2a2>
     9b4:	80 91 42 01 	lds	r24, 0x0142
     9b8:	90 91 43 01 	lds	r25, 0x0143
     9bc:	84 5c       	subi	r24, 0xC4	; 196
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	d4 f5       	brge	.+116    	; 0xa36 <loop+0x2a2>
		{
			if (ModeDelayCounter==0)
     9c2:	80 91 54 01 	lds	r24, 0x0154
     9c6:	90 91 55 01 	lds	r25, 0x0155
     9ca:	89 2b       	or	r24, r25
     9cc:	59 f5       	brne	.+86     	; 0xa24 <loop+0x290>
			{
				//ModeDelayCounter = 0xFB4F;	// 0xFFFF-FB4F=0x4B0=1200/400 = 3Seconds
				ModeDelayCounter = 0xFE6F;	// 0xFFFF-FE6F=0x190=400/400 = 1Seconds (Minsoo)
     9ce:	8f e6       	ldi	r24, 0x6F	; 111
     9d0:	9e ef       	ldi	r25, 0xFE	; 254
     9d2:	90 93 55 01 	sts	0x0155, r25
     9d6:	80 93 54 01 	sts	0x0154, r24
				CalibrateGyros();
     9da:	0e 94 dd 01 	call	0x3ba	; 0x3ba <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     9de:	10 92 08 01 	sts	0x0108, r1
		
				// Acro
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     9e2:	82 e3       	ldi	r24, 0x32	; 50
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	90 93 3d 01 	sts	0x013D, r25
     9ea:	80 93 3c 01 	sts	0x013C, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     9ee:	90 93 2f 01 	sts	0x012F, r25
     9f2:	80 93 2e 01 	sts	0x012E, r24
				StickYawGain = UFO_STICK_YAW_GAIN;
     9f6:	8a e5       	ldi	r24, 0x5A	; 90
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 41 01 	sts	0x0141, r25
     9fe:	80 93 40 01 	sts	0x0140, r24
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	0b c0       	rjmp	.+22     	; 0xa1c <loop+0x288>
		
				// flash LED 4 times
				for (i=0;i<4;i++)
				{
					LED = 0;
     a06:	2e 98       	cbi	0x05, 6	; 5
					delay_ms(25);
     a08:	89 e1       	ldi	r24, 0x19	; 25
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
					LED = 1;
     a10:	2e 9a       	sbi	0x05, 6	; 5
					delay_ms(25);
     a12:	89 e1       	ldi	r24, 0x19	; 25
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
     a1a:	1f 5f       	subi	r17, 0xFF	; 255
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
				StickYawGain = UFO_STICK_YAW_GAIN;
		
				// flash LED 4 times
				for (i=0;i<4;i++)
     a1c:	14 30       	cpi	r17, 0x04	; 4
     a1e:	98 f3       	brcs	.-26     	; 0xa06 <loop+0x272>
     a20:	10 93 18 01 	sts	0x0118, r17
					delay_ms(25);
					LED = 1;
					delay_ms(25);
				}
			}
			ModeDelayCounter++;
     a24:	80 91 54 01 	lds	r24, 0x0154
     a28:	90 91 55 01 	lds	r25, 0x0155
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	90 93 55 01 	sts	0x0155, r25
     a32:	80 93 54 01 	sts	0x0154, r24
		}

	}

	//--- Read gyros ---
	ReadGyros(false);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ReadGyros>

	//--- Start mixing by setting collective to motor input 1,2,3 and 4 ---
#ifndef SINGLE_COPTER
	if (RxInCollective > MAX_COLLECTIVE) RxInCollective = MAX_COLLECTIVE;
     a3c:	80 91 19 01 	lds	r24, 0x0119
     a40:	90 91 1a 01 	lds	r25, 0x011A
     a44:	8b 35       	cpi	r24, 0x5B	; 91
     a46:	91 05       	cpc	r25, r1
     a48:	34 f0       	brlt	.+12     	; 0xa56 <loop+0x2c2>
     a4a:	8a e5       	ldi	r24, 0x5A	; 90
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 1a 01 	sts	0x011A, r25
     a52:	80 93 19 01 	sts	0x0119, r24
	MotorOut1 = RxInCollective;
	MotorOut2 = RxInCollective;
	MotorOut3 = RxInCollective;
	MotorOut4 = 50;
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER)
	MotorOut1 = RxInCollective;
     a56:	c0 91 19 01 	lds	r28, 0x0119
     a5a:	d0 91 1a 01 	lds	r29, 0x011A
#endif

	//--- Calculate roll gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[ROLL] = gyroADC[ROLL] * GainIn[ROLL] * ROLL_GAIN_MULTIPLIER;		// Minsoo, 100 * 50 * 3 = 15000	150 * 50 * 3 = 22500		250 * 50 * 3 = 37500
	gyroADC[ROLL] /= ADC_GAIN_DIVIDER;											// Minsoo, 15000/150 = 100		22500/225 = 100		37500/375 = 100
     a5e:	20 91 34 01 	lds	r18, 0x0134
     a62:	30 91 35 01 	lds	r19, 0x0135
     a66:	c9 01       	movw	r24, r18
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	82 0f       	add	r24, r18
     a6e:	93 1f       	adc	r25, r19
     a70:	20 91 1b 01 	lds	r18, 0x011B
     a74:	30 91 1c 01 	lds	r19, 0x011C
     a78:	ac 01       	movw	r20, r24
     a7a:	42 9f       	mul	r20, r18
     a7c:	c0 01       	movw	r24, r0
     a7e:	43 9f       	mul	r20, r19
     a80:	90 0d       	add	r25, r0
     a82:	52 9f       	mul	r21, r18
     a84:	90 0d       	add	r25, r0
     a86:	11 24       	eor	r1, r1
     a88:	68 ec       	ldi	r22, 0xC8	; 200
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__divmodhi4>
     a90:	fb 01       	movw	r30, r22
     a92:	70 93 1c 01 	sts	0x011C, r23
     a96:	60 93 1b 01 	sts	0x011B, r22
	RxInRoll = (RxInRoll * StickRollGain / 100);	// Stick Controll %
     a9a:	20 91 3c 01 	lds	r18, 0x013C
     a9e:	30 91 3d 01 	lds	r19, 0x013D
     aa2:	80 91 28 01 	lds	r24, 0x0128
     aa6:	90 91 29 01 	lds	r25, 0x0129
     aaa:	ac 01       	movw	r20, r24
     aac:	24 9f       	mul	r18, r20
     aae:	c0 01       	movw	r24, r0
     ab0:	25 9f       	mul	r18, r21
     ab2:	90 0d       	add	r25, r0
     ab4:	34 9f       	mul	r19, r20
     ab6:	90 0d       	add	r25, r0
     ab8:	11 24       	eor	r1, r1
     aba:	64 e6       	ldi	r22, 0x64	; 100
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__divmodhi4>
     ac2:	9b 01       	movw	r18, r22
	RxInRoll   = (RxInRoll * 20)/23;	//RxInRollSine 60= 0.866 ~ 20/23 or possibly 7/8

	MotorOut1 += RxInRoll;
	MotorOut2 -= RxInRoll;
#elif defined(QUAD_COPTER)
	if (Config.RollGyroDirection == GYRO_NORMAL) {
     ac4:	80 91 57 01 	lds	r24, 0x0157
     ac8:	88 23       	and	r24, r24
     aca:	39 f4       	brne	.+14     	; 0xada <loop+0x346>
		RxInRoll += gyroADC[ROLL];
     acc:	e6 0f       	add	r30, r22
     ace:	f7 1f       	adc	r31, r23
     ad0:	f0 93 29 01 	sts	0x0129, r31
     ad4:	e0 93 28 01 	sts	0x0128, r30
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <loop+0x352>
	} else {
		RxInRoll -= gyroADC[ROLL];
     ada:	2e 1b       	sub	r18, r30
     adc:	3f 0b       	sbc	r19, r31
     ade:	30 93 29 01 	sts	0x0129, r19
     ae2:	20 93 28 01 	sts	0x0128, r18
	}

	MotorOut2 += RxInRoll;
     ae6:	e0 90 28 01 	lds	r14, 0x0128
     aea:	f0 90 29 01 	lds	r15, 0x0129
#endif

	//--- Calculate pitch gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[PITCH] = gyroADC[PITCH] * GainIn[PITCH] * PITCH_GAIN_MULTIPLIER;  
	gyroADC[PITCH] /= ADC_GAIN_DIVIDER;
     aee:	20 91 36 01 	lds	r18, 0x0136
     af2:	30 91 37 01 	lds	r19, 0x0137
     af6:	c9 01       	movw	r24, r18
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	82 0f       	add	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	20 91 1d 01 	lds	r18, 0x011D
     b04:	30 91 1e 01 	lds	r19, 0x011E
     b08:	ac 01       	movw	r20, r24
     b0a:	42 9f       	mul	r20, r18
     b0c:	c0 01       	movw	r24, r0
     b0e:	43 9f       	mul	r20, r19
     b10:	90 0d       	add	r25, r0
     b12:	52 9f       	mul	r21, r18
     b14:	90 0d       	add	r25, r0
     b16:	11 24       	eor	r1, r1
     b18:	68 ec       	ldi	r22, 0xC8	; 200
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__divmodhi4>
     b20:	fb 01       	movw	r30, r22
     b22:	70 93 1e 01 	sts	0x011E, r23
     b26:	60 93 1d 01 	sts	0x011D, r22
	RxInPitch = (RxInPitch * StickPitchGain / 100);	// Stick Controll %
     b2a:	20 91 2e 01 	lds	r18, 0x012E
     b2e:	30 91 2f 01 	lds	r19, 0x012F
     b32:	80 91 42 01 	lds	r24, 0x0142
     b36:	90 91 43 01 	lds	r25, 0x0143
     b3a:	ac 01       	movw	r20, r24
     b3c:	24 9f       	mul	r18, r20
     b3e:	c0 01       	movw	r24, r0
     b40:	25 9f       	mul	r18, r21
     b42:	90 0d       	add	r25, r0
     b44:	34 9f       	mul	r19, r20
     b46:	90 0d       	add	r25, r0
     b48:	11 24       	eor	r1, r1
     b4a:	64 e6       	ldi	r22, 0x64	; 100
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__divmodhi4>
     b52:	9b 01       	movw	r18, r22
	MotorOut3 -= RxInPitch;
	RxInPitch = (RxInPitch >> 1);	// cosine of 60
	MotorOut1 += RxInPitch;
	MotorOut2 += RxInPitch;
#elif defined(QUAD_COPTER)
	if (Config.PitchGyroDirection == GYRO_NORMAL) {	
     b54:	80 91 58 01 	lds	r24, 0x0158
     b58:	88 23       	and	r24, r24
     b5a:	39 f4       	brne	.+14     	; 0xb6a <loop+0x3d6>
		RxInPitch += gyroADC[PITCH];
     b5c:	e6 0f       	add	r30, r22
     b5e:	f7 1f       	adc	r31, r23
     b60:	f0 93 43 01 	sts	0x0143, r31
     b64:	e0 93 42 01 	sts	0x0142, r30
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <loop+0x3e2>
	} else {	
		RxInPitch -= gyroADC[PITCH];
     b6a:	2e 1b       	sub	r18, r30
     b6c:	3f 0b       	sbc	r19, r31
     b6e:	30 93 43 01 	sts	0x0143, r19
     b72:	20 93 42 01 	sts	0x0142, r18
	}

	MotorOut1 += RxInPitch;
     b76:	00 91 42 01 	lds	r16, 0x0142
     b7a:	10 91 43 01 	lds	r17, 0x0143
	MotorOut4 += RxInPitch;
#endif

	//--- Calculate yaw gyro output ---
	gyroADC[YAW] = (gyroADC[YAW] * GainIn[YAW] * YAW_GAIN_MULTIPLIER);
	gyroADC[YAW] /= ADC_GAIN_DIVIDER;
     b7e:	20 91 38 01 	lds	r18, 0x0138
     b82:	30 91 39 01 	lds	r19, 0x0139
     b86:	c9 01       	movw	r24, r18
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	82 0f       	add	r24, r18
     b8e:	93 1f       	adc	r25, r19
     b90:	20 91 1f 01 	lds	r18, 0x011F
     b94:	30 91 20 01 	lds	r19, 0x0120
     b98:	ac 01       	movw	r20, r24
     b9a:	42 9f       	mul	r20, r18
     b9c:	c0 01       	movw	r24, r0
     b9e:	43 9f       	mul	r20, r19
     ba0:	90 0d       	add	r25, r0
     ba2:	52 9f       	mul	r21, r18
     ba4:	90 0d       	add	r25, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	68 ec       	ldi	r22, 0xC8	; 200
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__divmodhi4>
     bb0:	fb 01       	movw	r30, r22
     bb2:	70 93 20 01 	sts	0x0120, r23
     bb6:	60 93 1f 01 	sts	0x011F, r22
	RxInYaw = (RxInYaw * StickYawGain / 100);			// Stick Controll %
     bba:	20 91 40 01 	lds	r18, 0x0140
     bbe:	30 91 41 01 	lds	r19, 0x0141
     bc2:	80 91 2a 01 	lds	r24, 0x012A
     bc6:	90 91 2b 01 	lds	r25, 0x012B
     bca:	ac 01       	movw	r20, r24
     bcc:	24 9f       	mul	r18, r20
     bce:	c0 01       	movw	r24, r0
     bd0:	25 9f       	mul	r18, r21
     bd2:	90 0d       	add	r25, r0
     bd4:	34 9f       	mul	r19, r20
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	64 e6       	ldi	r22, 0x64	; 100
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__divmodhi4>
     be2:	9b 01       	movw	r18, r22
	RxInYaw = (RxInYaw >> 3);
	LowpassOutYaw += RxInYaw;

	MotorOut4 += LowpassOutYaw;
#else
	if (Config.YawGyroDirection == GYRO_NORMAL)	{		// scale gyro output
     be4:	80 91 59 01 	lds	r24, 0x0159
     be8:	88 23       	and	r24, r24
     bea:	39 f4       	brne	.+14     	; 0xbfa <loop+0x466>
		RxInYaw += gyroADC[YAW];
     bec:	e6 0f       	add	r30, r22
     bee:	f7 1f       	adc	r31, r23
     bf0:	f0 93 2b 01 	sts	0x012B, r31
     bf4:	e0 93 2a 01 	sts	0x012A, r30
     bf8:	06 c0       	rjmp	.+12     	; 0xc06 <loop+0x472>
	} else {
		RxInYaw -= gyroADC[YAW];
     bfa:	2e 1b       	sub	r18, r30
     bfc:	3f 0b       	sbc	r19, r31
     bfe:	30 93 2b 01 	sts	0x012B, r19
     c02:	20 93 2a 01 	sts	0x012A, r18
	//--- (Add)Adjust yaw gyro output to motors
	#ifdef DUAL_COPTER
	MotorOut1 -= RxInYaw;
	MotorOut2 += RxInYaw;
	#elif defined(QUAD_COPTER)
	MotorOut1 -= RxInYaw;
     c06:	80 91 2a 01 	lds	r24, 0x012A
     c0a:	90 91 2b 01 	lds	r25, 0x012B
     c0e:	98 01       	movw	r18, r16
     c10:	2c 0f       	add	r18, r28
     c12:	3d 1f       	adc	r19, r29
     c14:	28 1b       	sub	r18, r24
     c16:	39 0b       	sbc	r19, r25
     c18:	30 93 22 01 	sts	0x0122, r19
     c1c:	20 93 21 01 	sts	0x0121, r18
	MotorOut2 += RxInYaw;
     c20:	a7 01       	movw	r20, r14
     c22:	4c 0f       	add	r20, r28
     c24:	5d 1f       	adc	r21, r29
     c26:	48 0f       	add	r20, r24
     c28:	59 1f       	adc	r21, r25
     c2a:	50 93 2d 01 	sts	0x012D, r21
     c2e:	40 93 2c 01 	sts	0x012C, r20
	MotorOut3 += RxInYaw;
     c32:	bc 01       	movw	r22, r24
     c34:	6c 0f       	add	r22, r28
     c36:	7d 1f       	adc	r23, r29
     c38:	6e 19       	sub	r22, r14
     c3a:	7f 09       	sbc	r23, r15
     c3c:	70 93 3f 01 	sts	0x013F, r23
     c40:	60 93 3e 01 	sts	0x013E, r22
	MotorOut4 -= RxInYaw;
     c44:	fe 01       	movw	r30, r28
     c46:	e0 1b       	sub	r30, r16
     c48:	f1 0b       	sbc	r31, r17
     c4a:	e8 1b       	sub	r30, r24
     c4c:	f9 0b       	sbc	r31, r25
     c4e:	f0 93 33 01 	sts	0x0133, r31
     c52:	e0 93 32 01 	sts	0x0132, r30
#elif defined(TRI_COPTER)
	if ( MotorOut1 < 10 )	MotorOut1 = 10;					// this is the motor idle level
	if ( MotorOut2 < 10 )	MotorOut2 = 10;	
	if ( MotorOut3 < 10 )	MotorOut3 = 10;
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER)
	if ( MotorOut1 < 10 )	MotorOut1 = 10;					// this is the motor idle level
     c56:	2a 30       	cpi	r18, 0x0A	; 10
     c58:	31 05       	cpc	r19, r1
     c5a:	34 f4       	brge	.+12     	; 0xc68 <loop+0x4d4>
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 22 01 	sts	0x0122, r25
     c64:	80 93 21 01 	sts	0x0121, r24
	if ( MotorOut2 < 10 )	MotorOut2 = 10;	
     c68:	4a 30       	cpi	r20, 0x0A	; 10
     c6a:	51 05       	cpc	r21, r1
     c6c:	34 f4       	brge	.+12     	; 0xc7a <loop+0x4e6>
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 2d 01 	sts	0x012D, r25
     c76:	80 93 2c 01 	sts	0x012C, r24
	if ( MotorOut3 < 10 )	MotorOut3 = 10;
     c7a:	6a 30       	cpi	r22, 0x0A	; 10
     c7c:	71 05       	cpc	r23, r1
     c7e:	34 f4       	brge	.+12     	; 0xc8c <loop+0x4f8>
     c80:	8a e0       	ldi	r24, 0x0A	; 10
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 3f 01 	sts	0x013F, r25
     c88:	80 93 3e 01 	sts	0x013E, r24
	if ( MotorOut4 < 10 )	MotorOut4 = 10;	
     c8c:	3a 97       	sbiw	r30, 0x0a	; 10
     c8e:	34 f4       	brge	.+12     	; 0xc9c <loop+0x508>
     c90:	8a e0       	ldi	r24, 0x0A	; 10
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	90 93 33 01 	sts	0x0133, r25
     c98:	80 93 32 01 	sts	0x0132, r24
	if ( MotorOut5 < 10 )	MotorOut5 = 10;	
	if ( MotorOut6 < 10 )	MotorOut6 = 10;	
#endif

	//--- Output to motor ESC's ---
	if (RxInCollective < 1 || !Armed || !GyroCalibrated)	// turn off motors if collective below 1% ???
     c9c:	1c 16       	cp	r1, r28
     c9e:	1d 06       	cpc	r1, r29
     ca0:	44 f4       	brge	.+16     	; 0xcb2 <loop+0x51e>
     ca2:	80 91 44 01 	lds	r24, 0x0144
     ca6:	88 23       	and	r24, r24
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <loop+0x51e>
     caa:	80 91 23 01 	lds	r24, 0x0123
     cae:	88 23       	and	r24, r24
     cb0:	81 f4       	brne	.+32     	; 0xcd2 <loop+0x53e>
		MotorOut1 = 0;
		MotorOut2 = 0;
		MotorOut3 = 0;
		MotorOut4 = 50;
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER)
		MotorOut1 = 0;
     cb2:	10 92 22 01 	sts	0x0122, r1
     cb6:	10 92 21 01 	sts	0x0121, r1
		MotorOut2 = 0;
     cba:	10 92 2d 01 	sts	0x012D, r1
     cbe:	10 92 2c 01 	sts	0x012C, r1
		MotorOut3 = 0;
     cc2:	10 92 3f 01 	sts	0x013F, r1
     cc6:	10 92 3e 01 	sts	0x013E, r1
		MotorOut4 = 0;
     cca:	10 92 33 01 	sts	0x0133, r1
     cce:	10 92 32 01 	sts	0x0132, r1
		MotorOut5 = 0;
		MotorOut6 = 0;
#endif
	}

	if (Armed) output_motor_ppm();		// output ESC signal
     cd2:	80 91 44 01 	lds	r24, 0x0144
     cd6:	88 23       	and	r24, r24
     cd8:	11 f0       	breq	.+4      	; 0xcde <loop+0x54a>
     cda:	0e 94 9b 02 	call	0x536	; 0x536 <output_motor_ppm>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <eeprom_write_byte_changed>:
	M6 = 1;
#endif
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	ec 01       	movw	r28, r24
     cf4:	16 2f       	mov	r17, r22
	if(eeprom_read_byte(addr) != value)
     cf6:	0e 94 9f 08 	call	0x113e	; 0x113e <__eerd_byte_m168a>
     cfa:	81 17       	cp	r24, r17
     cfc:	21 f0       	breq	.+8      	; 0xd06 <eeprom_write_byte_changed+0x1a>
	{
		eeprom_write_byte( addr, value );
     cfe:	ce 01       	movw	r24, r28
     d00:	61 2f       	mov	r22, r17
     d02:	0e 94 a7 08 	call	0x114e	; 0x114e <__eewr_byte_m168a>
	}
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	08 95       	ret

00000d0e <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	8c 01       	movw	r16, r24
     d20:	6b 01       	movw	r12, r22
     d22:	7a 01       	movw	r14, r20
     d24:	c0 e0       	ldi	r28, 0x00	; 0
     d26:	d0 e0       	ldi	r29, 0x00	; 0
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <eeprom_write_block_changes+0x2e>
	size_t len;

	for(len=0;len<size;len++)
	{
		eeprom_write_byte_changed( dest,  *src );
     d2a:	c6 01       	movw	r24, r12
     d2c:	8c 0f       	add	r24, r28
     d2e:	9d 1f       	adc	r25, r29
     d30:	f8 01       	movw	r30, r16
     d32:	61 91       	ld	r22, Z+
     d34:	8f 01       	movw	r16, r30
     d36:	0e 94 76 06 	call	0xcec	; 0xcec <eeprom_write_byte_changed>

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
	size_t len;

	for(len=0;len<size;len++)
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	ce 15       	cp	r28, r14
     d3e:	df 05       	cpc	r29, r15
     d40:	a0 f3       	brcs	.-24     	; 0xd2a <eeprom_write_block_changes+0x1c>
		eeprom_write_byte_changed( dest,  *src );

		src++;
		dest++;
	}
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	08 95       	ret

00000d54 <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// write to eeProm
	cli();
     d54:	f8 94       	cli
	eeprom_write_block_changes( (const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	//current_config CONFIG_STRUCT
     d56:	86 e5       	ldi	r24, 0x56	; 86
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	4c e0       	ldi	r20, 0x0C	; 12
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	0e 94 87 06 	call	0xd0e	; 0xd0e <eeprom_write_block_changes>
	sei();
     d66:	78 94       	sei
}
     d68:	08 95       	ret

00000d6a <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// load up last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!=0x47)
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 9f 08 	call	0x113e	; 0x113e <__eerd_byte_m168a>
     d72:	87 34       	cpi	r24, 0x47	; 71
     d74:	41 f0       	breq	.+16     	; 0xd86 <Initial_EEPROM_Config_Load+0x1c>
	{
		Config.setup = 0x47;
     d76:	87 e4       	ldi	r24, 0x47	; 71
     d78:	80 93 56 01 	sts	0x0156, r24
		Set_EEPROM_Default_Config();
     d7c:	0e 94 8f 03 	call	0x71e	; 0x71e <Set_EEPROM_Default_Config>
		// write to eeProm
		Save_Config_to_EEPROM();
     d80:	0e 94 aa 06 	call	0xd54	; 0xd54 <Save_Config_to_EEPROM>
     d84:	08 95       	ret
	} else {
		// read eeprom
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
     d86:	86 e5       	ldi	r24, 0x56	; 86
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	4c e0       	ldi	r20, 0x0C	; 12
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	0e 94 8f 08 	call	0x111e	; 0x111e <__eerd_block_m168a>
     d96:	08 95       	ret

00000d98 <setup>:

	return 1;
}

void setup(void)
{
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
	uint16_t i;	// nb was uint8_t, must be uint16_t for TRI
	uint16_t RxChannel1ZeroOffset, RxChannel2ZeroOffset, RxChannel4ZeroOffset;

	MCUCR |= (1<<PUD);	// Pull-up Disable
     da8:	85 b7       	in	r24, 0x35	; 53
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	85 bf       	out	0x35, r24	; 53

	RX_ROLL_DIR 		= INPUT;
     dae:	51 98       	cbi	0x0a, 1	; 10
	RX_PITCH_DIR 		= INPUT;
     db0:	52 98       	cbi	0x0a, 2	; 10
	RX_COLL_DIR   		= INPUT;
     db2:	53 98       	cbi	0x0a, 3	; 10
	RX_YAW_DIR   	 	= INPUT;
     db4:	27 98       	cbi	0x04, 7	; 4

	GYRO_YAW_DIR 	 	= INPUT;
     db6:	38 98       	cbi	0x07, 0	; 7
	GYRO_PITCH_DIR 	 	= INPUT;
     db8:	39 98       	cbi	0x07, 1	; 7
	GYRO_ROLL_DIR  		= INPUT;
     dba:	3a 98       	cbi	0x07, 2	; 7
	GAIN_YAW_DIR 	 	= INPUT;
     dbc:	3d 98       	cbi	0x07, 5	; 7
	GAIN_PITCH_DIR		= INPUT;
     dbe:	3c 98       	cbi	0x07, 4	; 7
	GAIN_ROLL_DIR  		= INPUT;
     dc0:	3b 98       	cbi	0x07, 3	; 7

	M1_DIR 				= OUTPUT;
     dc2:	22 9a       	sbi	0x04, 2	; 4
	M2_DIR 				= OUTPUT;
     dc4:	21 9a       	sbi	0x04, 1	; 4
	M3_DIR 			 	= OUTPUT;
     dc6:	20 9a       	sbi	0x04, 0	; 4
	M4_DIR 			 	= OUTPUT;
     dc8:	57 9a       	sbi	0x0a, 7	; 10
	M5_DIR 				= OUTPUT;
#endif
#if defined(HEX_COPTER) || defined(Y6_COPTER)
	M6_DIR 				= OUTPUT;
#endif
	LED_DIR 			= OUTPUT;
     dca:	26 9a       	sbi	0x04, 6	; 4

	LED			= 0;
     dcc:	2e 98       	cbi	0x05, 6	; 5
	RX_ROLL 	= 0;
     dce:	49 98       	cbi	0x09, 1	; 9
	RX_PITCH 	= 0;
     dd0:	4a 98       	cbi	0x09, 2	; 9
	RX_COLL  	= 0;
     dd2:	4b 98       	cbi	0x09, 3	; 9
	RX_YAW   	= 0;
     dd4:	1f 98       	cbi	0x03, 7	; 3

	// pin change interrupt enables
	PCICR |= (1 << PCIE0);			// PCINT0..7		
     dd6:	80 91 68 00 	lds	r24, 0x0068
     dda:	81 60       	ori	r24, 0x01	; 1
     ddc:	80 93 68 00 	sts	0x0068, r24
	PCICR |= (1 << PCIE2);			// PCINT16..23
     de0:	80 91 68 00 	lds	r24, 0x0068
     de4:	84 60       	ori	r24, 0x04	; 4
     de6:	80 93 68 00 	sts	0x0068, r24

	// pin change masks
	PCMSK0 |= (1 << PCINT7);		// PB7
     dea:	80 91 6b 00 	lds	r24, 0x006B
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	80 93 6b 00 	sts	0x006B, r24
	PCMSK2 |= (1 << PCINT17);		// PD1
     df4:	80 91 6d 00 	lds	r24, 0x006D
     df8:	82 60       	ori	r24, 0x02	; 2
     dfa:	80 93 6d 00 	sts	0x006D, r24
	// external interrupts
	EICRA  = (1 << ISC00) | (1 << ISC10);	// Any change INT0, INT1
     dfe:	85 e0       	ldi	r24, 0x05	; 5
     e00:	80 93 69 00 	sts	0x0069, r24
	EIMSK  = (1 << INT0) | (1 << INT1);		// External Interrupt Mask Register
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (1 << INTF0) | (1 << INTF1);
     e08:	8c b3       	in	r24, 0x1c	; 28
     e0a:	83 60       	ori	r24, 0x03	; 3
     e0c:	8c bb       	out	0x1c, r24	; 28

	// timer0 (8bit) - run @ 8MHz
	// used to control ESC/servo pulse length
	TCCR0A = 0;						// normal operation
     e0e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00);			// clk/0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0; 					// no interrupts
     e14:	10 92 6e 00 	sts	0x006E, r1

	// timer1 (16bit) - run @ 1Mhz
	// used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
     e18:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	80 93 81 00 	sts	0x0081, r24

	// timer2 8bit - run @ 8MHz / 1024 = 7812.5KHz
	// and Stick-Arming
	TCCR2A = 0;	
     e22:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);	// /1024
     e26:	87 e0       	ldi	r24, 0x07	; 7
     e28:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
     e2c:	10 92 70 00 	sts	0x0070, r1
	TIFR2  = 0;
     e30:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;		// reset counter
     e32:	10 92 b2 00 	sts	0x00B2, r1

#ifdef TRI_COPTER
	LowpassOutYaw = 0;								// Minsoo
#endif

	Initial_EEPROM_Config_Load();					// loads config at start-up 
     e36:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Initial_EEPROM_Config_Load>
	if (Armed) output_motor_ppm();		// output ESC signal
}

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     e3a:	8f e3       	ldi	r24, 0x3F	; 63
     e3c:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     e40:	10 92 7b 00 	sts	0x007B, r1

	Initial_EEPROM_Config_Load();					// loads config at start-up 

	Init_ADC();

	GyroCalibrated = false;
     e44:	10 92 23 01 	sts	0x0123, r1
	Armed = false;
     e48:	10 92 44 01 	sts	0x0144, r1
	RxChannelsUpdatingFlag = 0;
     e4c:	10 92 51 01 	sts	0x0151, r1

	RxChannel1 = Config.RxChannel1ZeroOffset;		// prime the channels 1520;
     e50:	80 91 5a 01 	lds	r24, 0x015A
     e54:	90 91 5b 01 	lds	r25, 0x015B
     e58:	90 93 53 01 	sts	0x0153, r25
     e5c:	80 93 52 01 	sts	0x0152, r24
	RxChannel2 = Config.RxChannel2ZeroOffset;		// 1520;
     e60:	80 91 5c 01 	lds	r24, 0x015C
     e64:	90 91 5d 01 	lds	r25, 0x015D
     e68:	90 93 3b 01 	sts	0x013B, r25
     e6c:	80 93 3a 01 	sts	0x013A, r24
	RxChannel3 = Config.RxChannel3ZeroOffset;		// 1120;
     e70:	80 91 5e 01 	lds	r24, 0x015E
     e74:	90 91 5f 01 	lds	r25, 0x015F
     e78:	90 93 50 01 	sts	0x0150, r25
     e7c:	80 93 4f 01 	sts	0x014F, r24
	RxChannel4 = Config.RxChannel4ZeroOffset;		// 1520;
     e80:	80 91 60 01 	lds	r24, 0x0160
     e84:	90 91 61 01 	lds	r25, 0x0161
     e88:	90 93 27 01 	sts	0x0127, r25
     e8c:	80 93 26 01 	sts	0x0126, r24

	// flash LED
	LED = 1;
     e90:	2e 9a       	sbi	0x05, 6	; 5
	delay_ms(150);
     e92:	86 e9       	ldi	r24, 0x96	; 150
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
	LED = 0;
     e9a:	2e 98       	cbi	0x05, 6	; 5

	sei();											// Global Interrupts 
     e9c:	78 94       	sei

	// 2 second delay
	delay_ms(1500);
     e9e:	8c ed       	ldi	r24, 0xDC	; 220
     ea0:	95 e0       	ldi	r25, 0x05	; 5
     ea2:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
	
	ReadGainPots();
     ea6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ReadGainPots>
	ReadGainPots();
     eaa:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ReadGainPots>

	// clear config
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100 && GainInADC[ROLL]  < (UC_ADC_MAX*5)/100 && GainInADC[YAW]   < (UC_ADC_MAX*5)/100 )
     eae:	80 91 49 01 	lds	r24, 0x0149
     eb2:	90 91 4a 01 	lds	r25, 0x014A
     eb6:	c3 97       	sbiw	r24, 0x33	; 51
     eb8:	08 f0       	brcs	.+2      	; 0xebc <setup+0x124>
     eba:	6d c0       	rjmp	.+218    	; 0xf96 <setup+0x1fe>
     ebc:	80 91 47 01 	lds	r24, 0x0147
     ec0:	90 91 48 01 	lds	r25, 0x0148
     ec4:	c3 97       	sbiw	r24, 0x33	; 51
     ec6:	48 f4       	brcc	.+18     	; 0xeda <setup+0x142>
     ec8:	80 91 4b 01 	lds	r24, 0x014B
     ecc:	90 91 4c 01 	lds	r25, 0x014C
     ed0:	c3 97       	sbiw	r24, 0x33	; 51
     ed2:	18 f4       	brcc	.+6      	; 0xeda <setup+0x142>
	{
		Set_EEPROM_Default_Config();
     ed4:	0e 94 8f 03 	call	0x71e	; 0x71e <Set_EEPROM_Default_Config>
     ed8:	ff cf       	rjmp	.-2      	; 0xed8 <setup+0x140>

	// Stick Centering
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
	    // set offsets to zero (otherwise we affect what we want to calibrate !!)
	    Config.RxChannel1ZeroOffset  = 0;
     eda:	10 92 5b 01 	sts	0x015B, r1
     ede:	10 92 5a 01 	sts	0x015A, r1
	    Config.RxChannel2ZeroOffset  = 0;
     ee2:	10 92 5d 01 	sts	0x015D, r1
     ee6:	10 92 5c 01 	sts	0x015C, r1
	    Config.RxChannel4ZeroOffset  = 0;
     eea:	10 92 61 01 	sts	0x0161, r1
     eee:	10 92 60 01 	sts	0x0160, r1
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
     ef4:	d0 e0       	ldi	r29, 0x00	; 0

		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     ef6:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     ef8:	89 e1       	ldi	r24, 0x19	; 25
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
			LED = 0;
     f00:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     f02:	89 e1       	ldi	r24, 0x19	; 25
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
	    Config.RxChannel1ZeroOffset  = 0;
	    Config.RxChannel2ZeroOffset  = 0;
	    Config.RxChannel4ZeroOffset  = 0;

		// flash LED 3 times
		for (i=0;i<3;i++)
     f0a:	21 96       	adiw	r28, 0x01	; 1
     f0c:	c3 30       	cpi	r28, 0x03	; 3
     f0e:	d1 05       	cpc	r29, r1
     f10:	91 f7       	brne	.-28     	; 0xef6 <setup+0x15e>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}
		// 5 Seconds Delay, for binding (Minsoo)
		delay_ms(3750);
     f12:	86 ea       	ldi	r24, 0xA6	; 166
     f14:	9e e0       	ldi	r25, 0x0E	; 14
     f16:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
     f1a:	ee 24       	eor	r14, r14
     f1c:	ff 24       	eor	r15, r15
     f1e:	cc 24       	eor	r12, r12
     f20:	dd 24       	eor	r13, r13
     f22:	c0 e0       	ldi	r28, 0x00	; 0
     f24:	d0 e0       	ldi	r29, 0x00	; 0
     f26:	00 e0       	ldi	r16, 0x00	; 0
     f28:	10 e0       	ldi	r17, 0x00	; 0

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
		{
	 		RxGetChannels();
     f2a:	0e 94 3d 02 	call	0x47a	; 0x47a <RxGetChannels>

		    RxChannel1ZeroOffset += RxInRoll;
     f2e:	80 91 28 01 	lds	r24, 0x0128
     f32:	90 91 29 01 	lds	r25, 0x0129
     f36:	08 0f       	add	r16, r24
     f38:	19 1f       	adc	r17, r25
		    RxChannel2ZeroOffset += RxInPitch;
     f3a:	80 91 42 01 	lds	r24, 0x0142
     f3e:	90 91 43 01 	lds	r25, 0x0143
     f42:	e8 0e       	add	r14, r24
     f44:	f9 1e       	adc	r15, r25
		    RxChannel4ZeroOffset += RxInYaw;
     f46:	80 91 2a 01 	lds	r24, 0x012A
     f4a:	90 91 2b 01 	lds	r25, 0x012B
     f4e:	c8 0e       	add	r12, r24
     f50:	d9 1e       	adc	r13, r25

			delay_ms(100);
     f52:	84 e6       	ldi	r24, 0x64	; 100
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
		// 5 Seconds Delay, for binding (Minsoo)
		delay_ms(3750);

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
     f5a:	21 96       	adiw	r28, 0x01	; 1
     f5c:	c4 30       	cpi	r28, 0x04	; 4
     f5e:	d1 05       	cpc	r29, r1
     f60:	21 f7       	brne	.-56     	; 0xf2a <setup+0x192>
		    RxChannel4ZeroOffset += RxInYaw;

			delay_ms(100);
		}
		// nb RxGetChannels() divides RxInXXX by 4 so we won't here
	    Config.RxChannel1ZeroOffset  = RxChannel1ZeroOffset;
     f62:	10 93 5b 01 	sts	0x015B, r17
     f66:	00 93 5a 01 	sts	0x015A, r16
	    Config.RxChannel2ZeroOffset  = RxChannel2ZeroOffset;
     f6a:	f0 92 5d 01 	sts	0x015D, r15
     f6e:	e0 92 5c 01 	sts	0x015C, r14
	    Config.RxChannel3ZeroOffset  = 1120;
     f72:	80 e6       	ldi	r24, 0x60	; 96
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	90 93 5f 01 	sts	0x015F, r25
     f7a:	80 93 5e 01 	sts	0x015E, r24
	    Config.RxChannel4ZeroOffset  = RxChannel4ZeroOffset;
     f7e:	d0 92 61 01 	sts	0x0161, r13
     f82:	c0 92 60 01 	sts	0x0160, r12

		// Store gyro direction to EEPROM
		Save_Config_to_EEPROM();
     f86:	0e 94 aa 06 	call	0xd54	; 0xd54 <Save_Config_to_EEPROM>

		// flash LED, Ending Sign (Minsoo)
		LED = 1;
     f8a:	2e 9a       	sbi	0x05, 6	; 5
		delay_ms(150);
     f8c:	86 e9       	ldi	r24, 0x96	; 150
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
		LED = 0;
     f94:	2e 98       	cbi	0x05, 6	; 5
	}


	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
     f96:	80 91 47 01 	lds	r24, 0x0147
     f9a:	90 91 48 01 	lds	r25, 0x0148
     f9e:	c3 97       	sbiw	r24, 0x33	; 51
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <setup+0x20c>
     fa2:	50 c0       	rjmp	.+160    	; 0x1044 <setup+0x2ac>
     fa4:	c0 e0       	ldi	r28, 0x00	; 0
     fa6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     fa8:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     faa:	89 e1       	ldi	r24, 0x19	; 25
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
			LED = 0;
     fb2:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     fb4:	89 e1       	ldi	r24, 0x19	; 25
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>

	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
     fbc:	21 96       	adiw	r28, 0x01	; 1
     fbe:	c3 30       	cpi	r28, 0x03	; 3
     fc0:	d1 05       	cpc	r29, r1
     fc2:	91 f7       	brne	.-28     	; 0xfa8 <setup+0x210>
			} else if (RxInYaw < -30) { // normal(left)
				Config.YawGyroDirection = GYRO_NORMAL;
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
				Config.YawGyroDirection = GYRO_REVERSED;
     fc4:	11 e0       	ldi	r17, 0x01	; 1
			delay_ms(25);
		}

		while(1)
		{
			RxGetChannels();
     fc6:	0e 94 3d 02 	call	0x47a	; 0x47a <RxGetChannels>

			if (RxInRoll < -30) {	// normal(left)
     fca:	80 91 28 01 	lds	r24, 0x0128
     fce:	90 91 29 01 	lds	r25, 0x0129
     fd2:	82 5e       	subi	r24, 0xE2	; 226
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <setup+0x24a>
				Config.RollGyroDirection = GYRO_NORMAL;
     fd8:	10 92 57 01 	sts	0x0157, r1
				Save_Config_to_EEPROM();
     fdc:	0e 94 aa 06 	call	0xd54	; 0xd54 <Save_Config_to_EEPROM>
				LED = 1;
     fe0:	2e 9a       	sbi	0x05, 6	; 5
			} if (RxInRoll > 30) {	// reverse(right)
     fe2:	80 91 28 01 	lds	r24, 0x0128
     fe6:	90 91 29 01 	lds	r25, 0x0129
     fea:	4f 97       	sbiw	r24, 0x1f	; 31
     fec:	1c f0       	brlt	.+6      	; 0xff4 <setup+0x25c>
				Config.RollGyroDirection = GYRO_REVERSED;
     fee:	10 93 57 01 	sts	0x0157, r17
     ff2:	1f c0       	rjmp	.+62     	; 0x1032 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch < -30) { // normal(up)
     ff4:	80 91 42 01 	lds	r24, 0x0142
     ff8:	90 91 43 01 	lds	r25, 0x0143
     ffc:	2f ef       	ldi	r18, 0xFF	; 255
     ffe:	82 3e       	cpi	r24, 0xE2	; 226
    1000:	92 07       	cpc	r25, r18
    1002:	1c f4       	brge	.+6      	; 0x100a <setup+0x272>
				Config.PitchGyroDirection = GYRO_NORMAL;
    1004:	10 92 58 01 	sts	0x0158, r1
    1008:	14 c0       	rjmp	.+40     	; 0x1032 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch > 30) { // reverse(down)
    100a:	4f 97       	sbiw	r24, 0x1f	; 31
    100c:	1c f0       	brlt	.+6      	; 0x1014 <setup+0x27c>
				Config.PitchGyroDirection = GYRO_REVERSED;
    100e:	10 93 58 01 	sts	0x0158, r17
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw < -30) { // normal(left)
    1014:	80 91 2a 01 	lds	r24, 0x012A
    1018:	90 91 2b 01 	lds	r25, 0x012B
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	82 3e       	cpi	r24, 0xE2	; 226
    1020:	92 07       	cpc	r25, r18
    1022:	1c f4       	brge	.+6      	; 0x102a <setup+0x292>
				Config.YawGyroDirection = GYRO_NORMAL;
    1024:	10 92 59 01 	sts	0x0159, r1
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <setup+0x29a>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
    102a:	4f 97       	sbiw	r24, 0x1f	; 31
    102c:	2c f0       	brlt	.+10     	; 0x1038 <setup+0x2a0>
				Config.YawGyroDirection = GYRO_REVERSED;
    102e:	10 93 59 01 	sts	0x0159, r17
				Save_Config_to_EEPROM();
    1032:	0e 94 aa 06 	call	0xd54	; 0xd54 <Save_Config_to_EEPROM>
				LED = 1;
    1036:	2e 9a       	sbi	0x05, 6	; 5
			}
	
			delay_ms(50);
    1038:	82 e3       	ldi	r24, 0x32	; 50
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
			LED = 0;
    1040:	2e 98       	cbi	0x05, 6	; 5
    1042:	c1 cf       	rjmp	.-126    	; 0xfc6 <setup+0x22e>

		}
	}

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
    1044:	80 91 4b 01 	lds	r24, 0x014B
    1048:	90 91 4c 01 	lds	r25, 0x014C
    104c:	c3 97       	sbiw	r24, 0x33	; 51
    104e:	90 f5       	brcc	.+100    	; 0x10b4 <setup+0x31c>
    1050:	c0 e0       	ldi	r28, 0x00	; 0
    1052:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
    1054:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
    1056:	89 e1       	ldi	r24, 0x19	; 25
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>
			LED = 0;
    105e:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
    1060:	89 e1       	ldi	r24, 0x19	; 25
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 b7 03 	call	0x76e	; 0x76e <delay_ms>

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
    1068:	21 96       	adiw	r28, 0x01	; 1
    106a:	c3 30       	cpi	r28, 0x03	; 3
    106c:	d1 05       	cpc	r29, r1
    106e:	91 f7       	brne	.-28     	; 0x1054 <setup+0x2bc>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}

		Armed = true;	// override so that output_motor_pwm() won't quit early
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 44 01 	sts	0x0144, r24
		PWM_Low_Pulse_Interval = ((1000000UL / 50) - 2000)/10;	// set to 50Hz
    1076:	88 e0       	ldi	r24, 0x08	; 8
    1078:	97 e0       	ldi	r25, 0x07	; 7
    107a:	90 93 01 01 	sts	0x0101, r25
    107e:	80 93 00 01 	sts	0x0100, r24
		ServoPPMRateDivider = 1;	// since we have already set to 50Hz
#endif
		
		while (1)	// loop forever
		{
			RxGetChannels();
    1082:	0e 94 3d 02 	call	0x47a	; 0x47a <RxGetChannels>
			MotorOut1 = RxInCollective;
			MotorOut2 = RxInCollective;
			MotorOut3 = RxInCollective;
			MotorOut4 = 50 + RxInYaw;
#elif defined(QUAD_COPTER) || defined(QUAD_X_COPTER)
			MotorOut1 = RxInCollective;
    1086:	80 91 19 01 	lds	r24, 0x0119
    108a:	90 91 1a 01 	lds	r25, 0x011A
    108e:	90 93 22 01 	sts	0x0122, r25
    1092:	80 93 21 01 	sts	0x0121, r24
			MotorOut2 = RxInCollective;
    1096:	90 93 2d 01 	sts	0x012D, r25
    109a:	80 93 2c 01 	sts	0x012C, r24
			MotorOut3 = RxInCollective;
    109e:	90 93 3f 01 	sts	0x013F, r25
    10a2:	80 93 3e 01 	sts	0x013E, r24
			MotorOut4 = RxInCollective;
    10a6:	90 93 33 01 	sts	0x0133, r25
    10aa:	80 93 32 01 	sts	0x0132, r24
			MotorOut6 = RxInCollective;
#else
#error No Copter configuration defined !!!!
#endif

			output_motor_ppm();	// this regulates rate at which we output signals
    10ae:	0e 94 9b 02 	call	0x536	; 0x536 <output_motor_ppm>
    10b2:	e7 cf       	rjmp	.-50     	; 0x1082 <setup+0x2ea>
		}
	}
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	08 95       	ret

000010c6 <main>:


int main(void)
{

	setup();
    10c6:	0e 94 cc 06 	call	0xd98	; 0xd98 <setup>

	while (1)
	{
		loop();
    10ca:	0e 94 ca 03 	call	0x794	; 0x794 <loop>
    10ce:	fd cf       	rjmp	.-6      	; 0x10ca <main+0x4>

000010d0 <__udivmodhi4>:
    10d0:	aa 1b       	sub	r26, r26
    10d2:	bb 1b       	sub	r27, r27
    10d4:	51 e1       	ldi	r21, 0x11	; 17
    10d6:	07 c0       	rjmp	.+14     	; 0x10e6 <__udivmodhi4_ep>

000010d8 <__udivmodhi4_loop>:
    10d8:	aa 1f       	adc	r26, r26
    10da:	bb 1f       	adc	r27, r27
    10dc:	a6 17       	cp	r26, r22
    10de:	b7 07       	cpc	r27, r23
    10e0:	10 f0       	brcs	.+4      	; 0x10e6 <__udivmodhi4_ep>
    10e2:	a6 1b       	sub	r26, r22
    10e4:	b7 0b       	sbc	r27, r23

000010e6 <__udivmodhi4_ep>:
    10e6:	88 1f       	adc	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	5a 95       	dec	r21
    10ec:	a9 f7       	brne	.-22     	; 0x10d8 <__udivmodhi4_loop>
    10ee:	80 95       	com	r24
    10f0:	90 95       	com	r25
    10f2:	bc 01       	movw	r22, r24
    10f4:	cd 01       	movw	r24, r26
    10f6:	08 95       	ret

000010f8 <__divmodhi4>:
    10f8:	97 fb       	bst	r25, 7
    10fa:	09 2e       	mov	r0, r25
    10fc:	07 26       	eor	r0, r23
    10fe:	0a d0       	rcall	.+20     	; 0x1114 <__divmodhi4_neg1>
    1100:	77 fd       	sbrc	r23, 7
    1102:	04 d0       	rcall	.+8      	; 0x110c <__divmodhi4_neg2>
    1104:	e5 df       	rcall	.-54     	; 0x10d0 <__udivmodhi4>
    1106:	06 d0       	rcall	.+12     	; 0x1114 <__divmodhi4_neg1>
    1108:	00 20       	and	r0, r0
    110a:	1a f4       	brpl	.+6      	; 0x1112 <__divmodhi4_exit>

0000110c <__divmodhi4_neg2>:
    110c:	70 95       	com	r23
    110e:	61 95       	neg	r22
    1110:	7f 4f       	sbci	r23, 0xFF	; 255

00001112 <__divmodhi4_exit>:
    1112:	08 95       	ret

00001114 <__divmodhi4_neg1>:
    1114:	f6 f7       	brtc	.-4      	; 0x1112 <__divmodhi4_exit>
    1116:	90 95       	com	r25
    1118:	81 95       	neg	r24
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__eerd_block_m168a>:
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22

00001122 <__eerd_blraw_m168a>:
    1122:	fc 01       	movw	r30, r24
    1124:	f9 99       	sbic	0x1f, 1	; 31
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <__eerd_blraw_m168a+0x2>
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <__eerd_blraw_m168a+0x14>
    112a:	f2 bd       	out	0x22, r31	; 34
    112c:	e1 bd       	out	0x21, r30	; 33
    112e:	f8 9a       	sbi	0x1f, 0	; 31
    1130:	31 96       	adiw	r30, 0x01	; 1
    1132:	00 b4       	in	r0, 0x20	; 32
    1134:	0d 92       	st	X+, r0
    1136:	41 50       	subi	r20, 0x01	; 1
    1138:	50 40       	sbci	r21, 0x00	; 0
    113a:	b8 f7       	brcc	.-18     	; 0x112a <__eerd_blraw_m168a+0x8>
    113c:	08 95       	ret

0000113e <__eerd_byte_m168a>:
    113e:	f9 99       	sbic	0x1f, 1	; 31
    1140:	fe cf       	rjmp	.-4      	; 0x113e <__eerd_byte_m168a>
    1142:	92 bd       	out	0x22, r25	; 34
    1144:	81 bd       	out	0x21, r24	; 33
    1146:	f8 9a       	sbi	0x1f, 0	; 31
    1148:	99 27       	eor	r25, r25
    114a:	80 b5       	in	r24, 0x20	; 32
    114c:	08 95       	ret

0000114e <__eewr_byte_m168a>:
    114e:	26 2f       	mov	r18, r22

00001150 <__eewr_r18_m168a>:
    1150:	f9 99       	sbic	0x1f, 1	; 31
    1152:	fe cf       	rjmp	.-4      	; 0x1150 <__eewr_r18_m168a>
    1154:	1f ba       	out	0x1f, r1	; 31
    1156:	92 bd       	out	0x22, r25	; 34
    1158:	81 bd       	out	0x21, r24	; 33
    115a:	20 bd       	out	0x20, r18	; 32
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	fa 9a       	sbi	0x1f, 2	; 31
    1162:	f9 9a       	sbi	0x1f, 1	; 31
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	08 95       	ret

0000116a <_exit>:
    116a:	f8 94       	cli

0000116c <__stop_program>:
    116c:	ff cf       	rjmp	.-2      	; 0x116c <__stop_program>
